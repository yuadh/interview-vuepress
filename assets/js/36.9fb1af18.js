(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{370:function(e,s,n){"use strict";n.r(s);var a=n(4),t=Object(a.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"核心概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[e._v("#")]),e._v(" 核心概念")]),e._v(" "),s("h2",{attrs:{id:"jsx简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jsx简介"}},[e._v("#")]),e._v(" JSX简介")]),e._v(" "),s("p",[e._v("设想如下变量声明：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const element = <h1>Hello, world!</h1>;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这个有趣的标签语法既不是字符串也不是 HTML。")]),e._v(" "),s("p",[e._v("它被称为 JSX，是一个 JavaScript 的语法扩展。我们建议在 React 中配合使用 JSX，JSX 可以很好地描述 UI 应该呈现出它应有交互的本质形式。JSX 可能会使人联想到模板语言，但它具有 JavaScript 的全部功能。")]),e._v(" "),s("p",[e._v("JSX 可以生成 React “元素”。我们将在"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/rendering-elements.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("下一章节"),s("OutboundLink")],1),e._v("中探讨如何将这些元素渲染为 DOM。下面我们看下学习 JSX 所需的基础知识。")]),e._v(" "),s("h3",{attrs:{id:"为什么使用-jsx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用-jsx"}},[e._v("#")]),e._v(" 为什么使用 JSX？")]),e._v(" "),s("p",[e._v("React 认为渲染逻辑本质上与其他 UI 逻辑内在耦合，比如，在 UI 中需要绑定处理事件、在某些时刻状态发生变化时需要通知到 UI，以及需要在 UI 中展示准备好的数据。")]),e._v(" "),s("p",[e._v("React 并没有采用将"),s("em",[e._v("标记与逻辑分离到不同文件")]),e._v("这种人为的分离方式，而是通过将二者共同存放在称之为“组件”的松散耦合单元之中，来实现"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Separation_of_concerns",target:"_blank",rel:"noopener noreferrer"}},[s("em",[e._v("关注点分离")]),s("OutboundLink")],1),e._v("。我们将在"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/components-and-props.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("后面章节"),s("OutboundLink")],1),e._v("中深入学习组件。如果你还没有适应在 JS 中使用标记语言，这个"),s("a",{attrs:{href:"https://www.youtube.com/watch?v=x7cQ3mrcKaY",target:"_blank",rel:"noopener noreferrer"}},[e._v("会议讨论"),s("OutboundLink")],1),e._v("应该可以说服你。")]),e._v(" "),s("p",[e._v("React "),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/react-without-jsx.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("不强制要求"),s("OutboundLink")],1),e._v("使用 JSX，但是大多数人发现，在 JavaScript 代码中将 JSX 和 UI 放在一起时，会在视觉上有辅助作用。它还可以使 React 显示更多有用的错误和警告消息。")]),e._v(" "),s("p",[e._v("搞清楚这个问题后，我们就开始学习 JSX 吧！")]),e._v(" "),s("h3",{attrs:{id:"在-jsx-中嵌入表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-jsx-中嵌入表达式"}},[e._v("#")]),e._v(" 在 JSX 中嵌入表达式")]),e._v(" "),s("p",[e._v("在下面的例子中，我们声明了一个名为 "),s("code",[e._v("name")]),e._v(" 的变量，然后在 JSX 中使用它，并将它包裹在大括号中：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const name = 'Josh Perez';const element = <h1>Hello, {name}</h1>;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("在 JSX 语法中，你可以在大括号内放置任何有效的 "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript 表达式"),s("OutboundLink")],1),e._v("。例如，"),s("code",[e._v("2 + 2")]),e._v("，"),s("code",[e._v("user.firstName")]),e._v(" 或 "),s("code",[e._v("formatName(user)")]),e._v(" 都是有效的 JavaScript 表达式。")]),e._v(" "),s("p",[e._v("在下面的示例中，我们将调用 JavaScript 函数 "),s("code",[e._v("formatName(user)")]),e._v(" 的结果，并将结果嵌入到 "),s("code",[e._v("<h1>")]),e._v(" 元素中。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function formatName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\n\nconst user = {\n  firstName: 'Harper',\n  lastName: 'Perez'\n};\n\nconst element = (\n  <h1>\n    Hello, {formatName(user)}!  </h1>\n);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[s("strong",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/PGEjdG?editors=1010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 上试试"),s("OutboundLink")],1)])]),e._v(" "),s("p",[e._v("为了便于阅读，我们会将 JSX 拆分为多行。同时，我们建议将内容包裹在括号中，虽然这样做不是强制要求的，但是这可以避免遇到"),s("a",{attrs:{href:"http://stackoverflow.com/q/2846283",target:"_blank",rel:"noopener noreferrer"}},[e._v("自动插入分号"),s("OutboundLink")],1),e._v("陷阱。")]),e._v(" "),s("h3",{attrs:{id:"jsx-也是一个表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jsx-也是一个表达式"}},[e._v("#")]),e._v(" JSX 也是一个表达式")]),e._v(" "),s("p",[e._v("在编译之后，JSX 表达式会被转为普通 JavaScript 函数调用，并且对其取值后得到 JavaScript 对象。")]),e._v(" "),s("p",[e._v("也就是说，你可以在 "),s("code",[e._v("if")]),e._v(" 语句和 "),s("code",[e._v("for")]),e._v(" 循环的代码块中使用 JSX，将 JSX 赋值给变量，把 JSX 当作参数传入，以及从函数中返回 JSX：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function getGreeting(user) {\n  if (user) {\n    return <h1>Hello, {formatName(user)}!</h1>;  }\n  return <h1>Hello, Stranger.</h1>;}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("h3",{attrs:{id:"jsx-中指定属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jsx-中指定属性"}},[e._v("#")]),e._v(" JSX 中指定属性")]),e._v(" "),s("p",[e._v("你可以通过使用引号，来将属性值指定为字符串字面量：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('const element = <a href="https://www.reactjs.org"> link </a>;\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("也可以使用大括号，来在属性值中插入一个 JavaScript 表达式：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const element = <img src={user.avatarUrl}></img>;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("在属性中嵌入 JavaScript 表达式时，不要在大括号外面加上引号。你应该仅使用引号（对于字符串值）或大括号（对于表达式）中的一个，对于同一属性不能同时使用这两种符号。")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("警告：")])]),e._v(" "),s("p",[e._v("因为 JSX 语法上更接近 JavaScript 而不是 HTML，所以 React DOM 使用 "),s("code",[e._v("camelCase")]),e._v("（小驼峰命名）来定义属性的名称，而不使用 HTML 属性名称的命名约定。")]),e._v(" "),s("p",[e._v("例如，JSX 里的 "),s("code",[e._v("class")]),e._v(" 变成了 "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Element/className",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("className")]),s("OutboundLink")],1),e._v("，而 "),s("code",[e._v("tabindex")]),e._v(" 则变为 "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("tabIndex")]),s("OutboundLink")],1),e._v("。")])]),e._v(" "),s("h3",{attrs:{id:"使用-jsx-指定子元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-jsx-指定子元素"}},[e._v("#")]),e._v(" 使用 JSX 指定子元素")]),e._v(" "),s("p",[e._v("假如一个标签里面没有内容，你可以使用 "),s("code",[e._v("/>")]),e._v(" 来闭合标签，就像 XML 语法一样：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const element = <img src={user.avatarUrl} />;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("JSX 标签里能够包含很多子元素:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const element = (\n  <div>\n    <h1>Hello!</h1>\n    <h2>Good to see you here.</h2>\n  </div>\n);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("h3",{attrs:{id:"jsx-防止注入攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jsx-防止注入攻击"}},[e._v("#")]),e._v(" JSX 防止注入攻击")]),e._v(" "),s("p",[e._v("你可以安全地在 JSX 当中插入用户输入内容：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const title = response.potentiallyMaliciousInput;\n// 直接使用是安全的：\nconst element = <h1>{title}</h1>;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("React DOM 在渲染所有输入内容之前，默认会进行"),s("a",{attrs:{href:"https://stackoverflow.com/questions/7381974/which-characters-need-to-be-escaped-on-html",target:"_blank",rel:"noopener noreferrer"}},[e._v("转义"),s("OutboundLink")],1),e._v("。它可以确保在你的应用中，永远不会注入那些并非自己明确编写的内容。所有的内容在渲染之前都被转换成了字符串。这样可以有效地防止 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cross-site_scripting",target:"_blank",rel:"noopener noreferrer"}},[e._v("XSS（cross-site-scripting, 跨站脚本）"),s("OutboundLink")],1),e._v("攻击。")]),e._v(" "),s("h3",{attrs:{id:"jsx-表示对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jsx-表示对象"}},[e._v("#")]),e._v(" JSX 表示对象")]),e._v(" "),s("p",[e._v("Babel 会把 JSX 转译成一个名为 "),s("code",[e._v("React.createElement()")]),e._v(" 函数调用。")]),e._v(" "),s("p",[e._v("以下两种示例代码完全等效：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const element = (\n  <h1 className=\"greeting\">\n    Hello, world!\n  </h1>\n);\nconst element = React.createElement(\n  'h1',\n  {className: 'greeting'},\n  'Hello, world!'\n);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[s("code",[e._v("React.createElement()")]),e._v(" 会预先执行一些检查，以帮助你编写无错代码，但实际上它创建了一个这样的对象：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 注意：这是简化过的结构\nconst element = {\n  type: 'h1',\n  props: {\n    className: 'greeting',\n    children: 'Hello, world!'\n  }\n};\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("这些对象被称为 “React 元素”。它们描述了你希望在屏幕上看到的内容。React 通过读取这些对象，然后使用它们来构建 DOM 以及保持随时更新。")]),e._v(" "),s("p",[e._v("我们将在"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/rendering-elements.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("下一章节"),s("OutboundLink")],1),e._v("中探讨如何将 React 元素渲染为 DOM。")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("提示：")])]),e._v(" "),s("p",[e._v("我们推荐在你使用的编辑器中，使用 "),s("a",{attrs:{href:"https://babeljs.io/docs/en/next/editors",target:"_blank",rel:"noopener noreferrer"}},[e._v("“Babel” 提供的语言定义"),s("OutboundLink")],1),e._v("，来正确地高亮显示 ES6 和 JSX 代码。")])]),e._v(" "),s("h2",{attrs:{id:"元素渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元素渲染"}},[e._v("#")]),e._v(" 元素渲染")]),e._v(" "),s("p",[e._v("元素是构成 React 应用的最小砖块。")]),e._v(" "),s("p",[e._v("元素描述了你在屏幕上想看到的内容。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const element = <h1>Hello, world</h1>;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("与浏览器的 DOM 元素不同，React 元素是创建开销极小的普通对象。React DOM 会负责更新 DOM 来与 React 元素保持一致。")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("注意：")])]),e._v(" "),s("p",[e._v("你可能会将元素与另一个被熟知的概念——“组件”混淆起来。我们会在"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/components-and-props.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("下一个章节"),s("OutboundLink")],1),e._v("介绍组件。组件是由元素构成的。我们强烈建议你不要觉得繁琐而跳过本章节，应当深入阅读这一章节。")])]),e._v(" "),s("h3",{attrs:{id:"将一个元素渲染为-dom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将一个元素渲染为-dom"}},[e._v("#")]),e._v(" 将一个元素渲染为 DOM")]),e._v(" "),s("p",[e._v("假设你的 HTML 文件某处有一个 "),s("code",[e._v("<div>")]),e._v("：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<div id="root"></div>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("我们将其称为“根” DOM 节点，因为该节点内的所有内容都将由 React DOM 管理。")]),e._v(" "),s("p",[e._v("仅使用 React 构建的应用通常只有单一的根 DOM 节点。如果你在将 React 集成进一个已有应用，那么你可以在应用中包含任意多的独立根 DOM 节点。")]),e._v(" "),s("p",[e._v("想要将一个 React 元素渲染到根 DOM 节点中，只需把它们一起传入 "),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/react-dom-client.html#createroot",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("ReactDOM.createRoot()")]),s("OutboundLink")],1),e._v("：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const root = ReactDOM.createRoot(\n  document.getElementById('root')\n);\nconst element = <h1>Hello, world</h1>;\nroot.render(element);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[s("strong",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/ZpvBNJ?editors=1010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 上试试"),s("OutboundLink")],1)])]),e._v(" "),s("p",[e._v("页面上会展示出 “Hello, world”。")]),e._v(" "),s("h3",{attrs:{id:"更新已渲染的元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新已渲染的元素"}},[e._v("#")]),e._v(" 更新已渲染的元素")]),e._v(" "),s("p",[e._v("React 元素是"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Immutable_object",target:"_blank",rel:"noopener noreferrer"}},[e._v("不可变对象"),s("OutboundLink")],1),e._v("。一旦被创建，你就无法更改它的子元素或者属性。一个元素就像电影的单帧：它代表了某个特定时刻的 UI。")]),e._v(" "),s("p",[e._v("根据我们已有的知识，更新 UI 唯一的方式是创建一个全新的元素，并将其传入 "),s("code",[e._v("root.render()")]),e._v("。")]),e._v(" "),s("p",[e._v("考虑一个计时器的例子：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const root = ReactDOM.createRoot(\n  document.getElementById('root')\n);\n\nfunction tick() {\n  const element = (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {new Date().toLocaleTimeString()}.</h2>\n    </div>\n  );\n  root.render(element);}\n\nsetInterval(tick, 1000);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br")])]),s("p",[s("strong",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/gwoJZk?editors=1010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 上试试"),s("OutboundLink")],1)])]),e._v(" "),s("p",[e._v("这个例子会在 "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("setInterval()")]),s("OutboundLink")],1),e._v(" 回调函数，每秒都调用 "),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/react-dom.html#render",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("root.render()")]),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("注意：")])]),e._v(" "),s("p",[e._v("在实践中，大多数 React 应用只会调用一次 "),s("code",[e._v("root.render()")]),e._v("。在下一个章节，我们将学习如何将这些代码封装到"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/state-and-lifecycle.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("有状态组件"),s("OutboundLink")],1),e._v("中。")]),e._v(" "),s("p",[e._v("我们建议你不要跳跃着阅读，因为每个话题都是紧密联系的。")])]),e._v(" "),s("h3",{attrs:{id:"react-只更新它需要更新的部分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-只更新它需要更新的部分"}},[e._v("#")]),e._v(" React 只更新它需要更新的部分")]),e._v(" "),s("p",[e._v("React DOM 会将元素和它的子元素与它们之前的状态进行比较，并只会进行必要的更新来使 DOM 达到预期的状态。")]),e._v(" "),s("p",[e._v("你可以通过查看 "),s("a",{attrs:{href:"https://codepen.io/gaearon/pen/gwoJZk?editors=1010",target:"_blank",rel:"noopener noreferrer"}},[e._v("上一个例子"),s("OutboundLink")],1),e._v(" 来确认这一点。")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://zh-hans.reactjs.org/c158617ed7cc0eac8f58330e49e48224/granular-dom-updates.gif",alt:"DOM inspector showing granular updates"}})]),e._v(" "),s("p",[e._v("尽管每一秒我们都会新建一个描述整个 UI 树的元素，React DOM 只会更新实际改变了的内容，也就是例子中的文本节点。")]),e._v(" "),s("p",[e._v("根据我们的经验，应该专注于 UI 在任意给定时刻的状态，而不是一视同仁地随着时间修改整个界面。")]),e._v(" "),s("h2",{attrs:{id:"组件-props"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件-props"}},[e._v("#")]),e._v(" 组件 & Props")]),e._v(" "),s("p",[e._v("组件允许你将 UI 拆分为独立可复用的代码片段，并对每个片段进行独立构思。本指南旨在介绍组件的相关理念。你可以"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/react-component.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考详细组件 API"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("组件，从概念上类似于 JavaScript 函数。它接受任意的入参（即 “props”），并返回用于描述页面展示内容的 React 元素。")]),e._v(" "),s("h3",{attrs:{id:"函数组件与-class-组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数组件与-class-组件"}},[e._v("#")]),e._v(" 函数组件与 class 组件")]),e._v(" "),s("p",[e._v("定义组件最简单的方式就是编写 JavaScript 函数：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("该函数是一个有效的 React 组件，因为它接收唯一带有数据的 “props”（代表属性）对象与并返回一个 React 元素。这类组件被称为“函数组件”，因为它本质上就是 JavaScript 函数。")]),e._v(" "),s("p",[e._v("你同时还可以使用 "),s("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes",target:"_blank",rel:"noopener noreferrer"}},[e._v("ES6 的 class"),s("OutboundLink")],1),e._v(" 来定义组件：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("上述两个组件在 React 里是等效的。")]),e._v(" "),s("p",[e._v("我们将在"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/state-and-lifecycle.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("下一章节"),s("OutboundLink")],1),e._v("中讨论关于函数组件和 class 组件的额外特性。")]),e._v(" "),s("h3",{attrs:{id:"渲染组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染组件"}},[e._v("#")]),e._v(" 渲染组件")]),e._v(" "),s("p",[e._v("之前，我们遇到的 React 元素都只是 DOM 标签：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const element = <div />;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("不过，React 元素也可以是用户自定义的组件：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('const element = <Welcome name="Sara" />;\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("当 React 元素为用户自定义组件时，它会将 JSX 所接收的属性（attributes）以及子组件（children）转换为单个对象传递给组件，这个对象被称之为 “props”。")]),e._v(" "),s("p",[e._v("例如，这段代码会在页面上渲染 “Hello, Sara”：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function Welcome(props) {  return <h1>Hello, {props.name}</h1>;\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst element = <Welcome name=\"Sara\" />;root.render(element);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[s("strong",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/YGYmEG?editors=1010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 上试试"),s("OutboundLink")],1)])]),e._v(" "),s("p",[e._v("让我们来回顾一下这个例子中发生了什么：")]),e._v(" "),s("ol",[s("li",[e._v("我们调用 "),s("code",[e._v("root.render()")]),e._v(" 函数，并传入 "),s("code",[e._v('<Welcome name="Sara" />')]),e._v(" 作为参数。")]),e._v(" "),s("li",[e._v("React 调用 "),s("code",[e._v("Welcome")]),e._v(" 组件，并将 "),s("code",[e._v("{name: 'Sara'}")]),e._v(" 作为 props 传入。")]),e._v(" "),s("li",[s("code",[e._v("Welcome")]),e._v(" 组件将 "),s("code",[e._v("<h1>Hello, Sara</h1>")]),e._v(" 元素作为返回值。")]),e._v(" "),s("li",[e._v("React DOM 将 DOM 高效地更新为 "),s("code",[e._v("<h1>Hello, Sara</h1>")]),e._v("。")])]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("注意：")]),e._v(" 组件名称必须以大写字母开头。")]),e._v(" "),s("p",[e._v("React 会将以小写字母开头的组件视为原生 DOM 标签。例如，"),s("code",[e._v("<div />")]),e._v(" 代表 HTML 的 div 标签，而 "),s("code",[e._v("<Welcome />")]),e._v(" 则代表一个组件，并且需在作用域内使用 "),s("code",[e._v("Welcome")]),e._v("。")]),e._v(" "),s("p",[e._v("你可以在"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/jsx-in-depth.html#user-defined-components-must-be-capitalized",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入 JSX"),s("OutboundLink")],1),e._v(" 中了解更多关于此规范的原因。")])]),e._v(" "),s("h3",{attrs:{id:"组合组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组合组件"}},[e._v("#")]),e._v(" 组合组件")]),e._v(" "),s("p",[e._v("组件可以在其输出中引用其他组件。这就可以让我们用同一组件来抽象出任意层次的细节。按钮，表单，对话框，甚至整个屏幕的内容：在 React 应用程序中，这些通常都会以组件的形式表示。")]),e._v(" "),s("p",[e._v("例如，我们可以创建一个可以多次渲染 "),s("code",[e._v("Welcome")]),e._v(" 组件的 "),s("code",[e._v("App")]),e._v(" 组件：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nfunction App() {\n  return (\n    <div>\n      <Welcome name="Sara" />      <Welcome name="Cahal" />      <Welcome name="Edite" />    </div>\n  );\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[s("strong",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/KgQKPr?editors=1010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 上试试"),s("OutboundLink")],1)])]),e._v(" "),s("p",[e._v("通常来说，每个新的 React 应用程序的顶层组件都是 "),s("code",[e._v("App")]),e._v(" 组件。但是，如果你将 React 集成到现有的应用程序中，你可能需要使用像 "),s("code",[e._v("Button")]),e._v(" 这样的小组件，并自下而上地将这类组件逐步应用到视图层的每一处。")]),e._v(" "),s("h3",{attrs:{id:"提取组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提取组件"}},[e._v("#")]),e._v(" 提取组件")]),e._v(" "),s("p",[e._v("将组件拆分为更小的组件。")]),e._v(" "),s("p",[e._v("例如，参考如下 "),s("code",[e._v("Comment")]),e._v(" 组件：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('function Comment(props) {\n  return (\n    <div className="Comment">\n      <div className="UserInfo">\n        <img className="Avatar"\n          src={props.author.avatarUrl}\n          alt={props.author.name}\n        />\n        <div className="UserInfo-name">\n          {props.author.name}\n        </div>\n      </div>\n      <div className="Comment-text">\n        {props.text}\n      </div>\n      <div className="Comment-date">\n        {formatDate(props.date)}\n      </div>\n    </div>\n  );\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br")])]),s("p",[s("strong",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/VKQwEo?editors=1010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 上试试"),s("OutboundLink")],1)])]),e._v(" "),s("p",[e._v("该组件用于描述一个社交媒体网站上的评论功能，它接收 "),s("code",[e._v("author")]),e._v("（对象），"),s("code",[e._v("text")]),e._v(" （字符串）以及 "),s("code",[e._v("date")]),e._v("（日期）作为 props。")]),e._v(" "),s("p",[e._v("该组件由于嵌套的关系，变得难以维护，且很难复用它的各个部分。因此，让我们从中提取一些组件出来。")]),e._v(" "),s("p",[e._v("首先，我们将提取 "),s("code",[e._v("Avatar")]),e._v(" 组件：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('function Avatar(props) {\n  return (\n    <img className="Avatar"      src={props.user.avatarUrl}      alt={props.user.name}    />  );\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[s("code",[e._v("Avatar")]),e._v(" 不需知道它在 "),s("code",[e._v("Comment")]),e._v(" 组件内部是如何渲染的。因此，我们给它的 props 起了一个更通用的名字："),s("code",[e._v("user")]),e._v("，而不是 "),s("code",[e._v("author")]),e._v("。")]),e._v(" "),s("p",[e._v("我们建议从组件自身的角度命名 props，而不是依赖于调用组件的上下文命名。")]),e._v(" "),s("p",[e._v("我们现在针对 "),s("code",[e._v("Comment")]),e._v(" 做些微小调整：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('function Comment(props) {\n  return (\n    <div className="Comment">\n      <div className="UserInfo">\n        <Avatar user={props.author} />        <div className="UserInfo-name">\n          {props.author.name}\n        </div>\n      </div>\n      <div className="Comment-text">\n        {props.text}\n      </div>\n      <div className="Comment-date">\n        {formatDate(props.date)}\n      </div>\n    </div>\n  );\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br")])]),s("p",[e._v("接下来，我们将提取 "),s("code",[e._v("UserInfo")]),e._v(" 组件，该组件在用户名旁渲染 "),s("code",[e._v("Avatar")]),e._v(" 组件：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('function UserInfo(props) {\n  return (\n    <div className="UserInfo">      <Avatar user={props.user} />      <div className="UserInfo-name">        {props.user.name}      </div>    </div>  );\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("进一步简化 "),s("code",[e._v("Comment")]),e._v(" 组件：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('function Comment(props) {\n  return (\n    <div className="Comment">\n      <UserInfo user={props.author} />      <div className="Comment-text">\n        {props.text}\n      </div>\n      <div className="Comment-date">\n        {formatDate(props.date)}\n      </div>\n    </div>\n  );\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("p",[s("strong",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/rrJNJY?editors=1010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 上试试"),s("OutboundLink")],1)])]),e._v(" "),s("p",[e._v("最初看上去，提取组件可能是一件繁重的工作，但是，在大型应用中，构建可复用组件库是完全值得的。根据经验来看，如果 UI 中有一部分被多次使用（"),s("code",[e._v("Button")]),e._v("，"),s("code",[e._v("Panel")]),e._v("，"),s("code",[e._v("Avatar")]),e._v("），或者组件本身就足够复杂（"),s("code",[e._v("App")]),e._v("，"),s("code",[e._v("FeedStory")]),e._v("，"),s("code",[e._v("Comment")]),e._v("），那么它就是一个可提取出独立组件的候选项。")]),e._v(" "),s("h3",{attrs:{id:"props-的只读性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#props-的只读性"}},[e._v("#")]),e._v(" Props 的只读性")]),e._v(" "),s("p",[e._v("组件无论是使用"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/components-and-props.html#function-and-class-components",target:"_blank",rel:"noopener noreferrer"}},[e._v("函数声明还是通过 class 声明"),s("OutboundLink")],1),e._v("，都绝不能修改自身的 props。来看下这个 "),s("code",[e._v("sum")]),e._v(" 函数：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function sum(a, b) {\n  return a + b;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("这样的函数被称为"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Pure_function",target:"_blank",rel:"noopener noreferrer"}},[e._v("“纯函数”"),s("OutboundLink")],1),e._v("，因为该函数不会尝试更改入参，且多次调用下相同的入参始终返回相同的结果。")]),e._v(" "),s("p",[e._v("相反，下面这个函数则不是纯函数，因为它更改了自己的入参：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function withdraw(account, amount) {\n  account.total -= amount;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("React 非常灵活，但它也有一个严格的规则：")]),e._v(" "),s("p",[s("strong",[e._v("所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。")])]),e._v(" "),s("p",[e._v("当然，应用程序的 UI 是动态的，并会伴随着时间的推移而变化。在"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/state-and-lifecycle.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("下一章节"),s("OutboundLink")],1),e._v("中，我们将介绍一种新的概念，称之为 “state”。在不违反上述规则的情况下，state 允许 React 组件随用户操作、网络响应或者其他变化而动态更改输出内容。")]),e._v(" "),s("h2",{attrs:{id:"state-生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#state-生命周期"}},[e._v("#")]),e._v(" State & 生命周期")]),e._v(" "),s("p",[e._v("State更新可能是异步的")]),e._v(" "),s("p",[e._v("要解决这个问题，可以让 setState() 接收一个函数而不是一个对象。这个函数用上一个state作为第一个参数，将此此更新被应用时的 props 作为第二个参数")]),e._v(" "),s("p",[e._v("本页面介绍了 React 组件中 state 和生命周期的概念。你可以查阅"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/react-component.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("详细的组件 API 参考文档"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("请参考"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/rendering-elements.html#updating-the-rendered-element",target:"_blank",rel:"noopener noreferrer"}},[e._v("前一章节"),s("OutboundLink")],1),e._v("中时钟的例子。在"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/rendering-elements.html#rendering-an-element-into-the-dom",target:"_blank",rel:"noopener noreferrer"}},[e._v("元素渲染"),s("OutboundLink")],1),e._v("章节中，我们只了解了一种更新 UI 界面的方法。通过调用 "),s("code",[e._v("root.render()")]),e._v(" 来修改我们想要渲染的元素：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const root = ReactDOM.createRoot(document.getElementById('root'));\n  \nfunction tick() {\n  const element = (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {new Date().toLocaleTimeString()}.</h2>\n    </div>\n  );\n  root.render(element);}\n\nsetInterval(tick, 1000);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/gwoJZk?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("在本章节中，我们将学习如何封装真正可复用的 "),s("code",[e._v("Clock")]),e._v(" 组件。它将设置自己的计时器并每秒更新一次。")]),e._v(" "),s("p",[e._v("我们可以从封装时钟的外观开始：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const root = ReactDOM.createRoot(document.getElementById('root'));\n\nfunction Clock(props) {\n  return (\n    <div>      <h1>Hello, world!</h1>      <h2>It is {props.date.toLocaleTimeString()}.</h2>    </div>  );\n}\n\nfunction tick() {\n  root.render(<Clock date={new Date()} />);}\n\nsetInterval(tick, 1000);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/dpdoYR?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("然而，它忽略了一个关键的技术细节："),s("code",[e._v("Clock")]),e._v(" 组件需要设置一个计时器，并且需要每秒更新 UI。")]),e._v(" "),s("p",[e._v("理想情况下，我们希望只编写一次代码，便可以让 "),s("code",[e._v("Clock")]),e._v(" 组件自我更新：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("root.render(<Clock />);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("我们需要在 "),s("code",[e._v("Clock")]),e._v(" 组件中添加 “state” 来实现这个功能。")]),e._v(" "),s("p",[e._v("State 与 props 类似，但是 state 是私有的，并且完全受控于当前组件。")]),e._v(" "),s("h3",{attrs:{id:"将函数组件转换成-class-组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将函数组件转换成-class-组件"}},[e._v("#")]),e._v(" 将函数组件转换成 class 组件")]),e._v(" "),s("p",[e._v("通过以下五步将 "),s("code",[e._v("Clock")]),e._v(" 的函数组件转成 class 组件：")]),e._v(" "),s("ol",[s("li",[e._v("创建一个同名的 "),s("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes",target:"_blank",rel:"noopener noreferrer"}},[e._v("ES6 class"),s("OutboundLink")],1),e._v("，并且继承于 "),s("code",[e._v("React.Component")]),e._v("。")]),e._v(" "),s("li",[e._v("添加一个空的 "),s("code",[e._v("render()")]),e._v(" 方法。")]),e._v(" "),s("li",[e._v("将函数体移动到 "),s("code",[e._v("render()")]),e._v(" 方法之中。")]),e._v(" "),s("li",[e._v("在 "),s("code",[e._v("render()")]),e._v(" 方法中使用 "),s("code",[e._v("this.props")]),e._v(" 替换 "),s("code",[e._v("props")]),e._v("。")]),e._v(" "),s("li",[e._v("删除剩余的空函数声明。")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class Clock extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.props.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/zKRGpo?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("现在 "),s("code",[e._v("Clock")]),e._v(" 组件被定义为 class，而不是函数。")]),e._v(" "),s("p",[e._v("每次组件更新时 "),s("code",[e._v("render")]),e._v(" 方法都会被调用，但只要在相同的 DOM 节点中渲染 "),s("code",[e._v("<Clock />")]),e._v(" ，就仅有一个 "),s("code",[e._v("Clock")]),e._v(" 组件的 class 实例被创建使用。这就使得我们可以使用如 state 或生命周期方法等很多其他特性。")]),e._v(" "),s("h3",{attrs:{id:"向-class-组件中添加局部的-state"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向-class-组件中添加局部的-state"}},[e._v("#")]),e._v(" 向 class 组件中添加局部的 state")]),e._v(" "),s("p",[e._v("我们通过以下三步将 "),s("code",[e._v("date")]),e._v(" 从 props 移动到 state 中：")]),e._v(" "),s("ol",[s("li",[e._v("把 "),s("code",[e._v("render()")]),e._v(" 方法中的 "),s("code",[e._v("this.props.date")]),e._v(" 替换成 "),s("code",[e._v("this.state.date")]),e._v(" ：")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class Clock extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>      </div>\n    );\n  }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("ol",[s("li",[e._v("添加一个 "),s("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes#Constructor",target:"_blank",rel:"noopener noreferrer"}},[e._v("class 构造函数"),s("OutboundLink")],1),e._v("，然后在该函数中为 "),s("code",[e._v("this.state")]),e._v(" 赋初值：")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br")])]),s("p",[e._v("通过以下方式将 "),s("code",[e._v("props")]),e._v(" 传递到父类的构造函数中：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  constructor(props) {\n    super(props);    this.state = {date: new Date()};\n  }\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("Class 组件应该始终使用 "),s("code",[e._v("props")]),e._v(" 参数来调用父类的构造函数。")]),e._v(" "),s("ol",[s("li",[e._v("移除 "),s("code",[e._v("<Clock />")]),e._v(" 元素中的 "),s("code",[e._v("date")]),e._v(" 属性：")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("root.render(<Clock />);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("我们之后会将计时器相关的代码添加到组件中。")]),e._v(" "),s("p",[e._v("代码如下：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class Clock extends React.Component {\n  constructor(props) {    super(props);    this.state = {date: new Date()};  }\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>      </div>\n    );\n  }\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Clock />);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/KgQpJd?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("接下来，我们会设置 "),s("code",[e._v("Clock")]),e._v(" 的计时器并每秒更新它。")]),e._v(" "),s("h3",{attrs:{id:"将生命周期方法添加到-class-中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将生命周期方法添加到-class-中"}},[e._v("#")]),e._v(" 将生命周期方法添加到 Class 中")]),e._v(" "),s("p",[e._v("在具有许多组件的应用程序中，当组件被销毁时释放所占用的资源是非常重要的。")]),e._v(" "),s("p",[e._v("当 "),s("code",[e._v("Clock")]),e._v(" 组件第一次被渲染到 DOM 中的时候，就为其"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval",target:"_blank",rel:"noopener noreferrer"}},[e._v("设置一个计时器"),s("OutboundLink")],1),e._v("。这在 React 中被称为“挂载（mount）”。")]),e._v(" "),s("p",[e._v("同时，当 DOM 中 "),s("code",[e._v("Clock")]),e._v(" 组件被删除的时候，应该"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval",target:"_blank",rel:"noopener noreferrer"}},[e._v("清除计时器"),s("OutboundLink")],1),e._v("。这在 React 中被称为“卸载（unmount）”。")]),e._v(" "),s("p",[e._v("我们可以为 class 组件声明一些特殊的方法，当组件挂载或卸载时就会去执行这些方法：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  componentDidMount() {  }\n  componentWillUnmount() {  }\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br")])]),s("p",[e._v("这些方法叫做“生命周期方法”。")]),e._v(" "),s("p",[s("code",[e._v("componentDidMount()")]),e._v(" 方法会在组件已经被渲染到 DOM 中后运行，所以，最好在这里设置计时器：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  componentDidMount() {\n    this.timerID = setInterval(      () => this.tick(),      1000    );  }\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("接下来把计时器的 ID 保存在 "),s("code",[e._v("this")]),e._v(" 之中（"),s("code",[e._v("this.timerID")]),e._v("）。")]),e._v(" "),s("p",[e._v("尽管 "),s("code",[e._v("this.props")]),e._v(" 和 "),s("code",[e._v("this.state")]),e._v(" 是 React 本身设置的，且都拥有特殊的含义，但是其实你可以向 class 中随意添加不参与数据流（比如计时器 ID）的额外字段。")]),e._v(" "),s("p",[e._v("我们会在 "),s("code",[e._v("componentWillUnmount()")]),e._v(" 生命周期方法中清除计时器：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  componentWillUnmount() {\n    clearInterval(this.timerID);  }\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("最后，我们会实现一个叫 "),s("code",[e._v("tick()")]),e._v(" 的方法，"),s("code",[e._v("Clock")]),e._v(" 组件每秒都会调用它。")]),e._v(" "),s("p",[e._v("使用 "),s("code",[e._v("this.setState()")]),e._v(" 来时刻更新组件 state：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {    this.setState({      date: new Date()    });  }\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Clock />);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/amqdNA?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("现在时钟每秒都会刷新。")]),e._v(" "),s("p",[e._v("让我们来快速概括一下发生了什么和这些方法的调用顺序：")]),e._v(" "),s("ol",[s("li",[e._v("当 "),s("code",[e._v("<Clock />")]),e._v(" 被传给 "),s("code",[e._v("root.render()")]),e._v("的时候，React 会调用 "),s("code",[e._v("Clock")]),e._v(" 组件的构造函数。因为 "),s("code",[e._v("Clock")]),e._v(" 需要显示当前的时间，所以它会用一个包含当前时间的对象来初始化 "),s("code",[e._v("this.state")]),e._v("。我们会在之后更新 state。")]),e._v(" "),s("li",[e._v("之后 React 会调用组件的 "),s("code",[e._v("render()")]),e._v(" 方法。这就是 React 确定该在页面上展示什么的方式。然后 React 更新 DOM 来匹配 "),s("code",[e._v("Clock")]),e._v(" 渲染的输出。")]),e._v(" "),s("li",[e._v("当 "),s("code",[e._v("Clock")]),e._v(" 的输出被插入到 DOM 中后，React 就会调用 "),s("code",[e._v("ComponentDidMount()")]),e._v(" 生命周期方法。在这个方法中，"),s("code",[e._v("Clock")]),e._v(" 组件向浏览器请求设置一个计时器来每秒调用一次组件的 "),s("code",[e._v("tick()")]),e._v(" 方法。")]),e._v(" "),s("li",[e._v("浏览器每秒都会调用一次 "),s("code",[e._v("tick()")]),e._v(" 方法。 在这方法之中，"),s("code",[e._v("Clock")]),e._v(" 组件会通过调用 "),s("code",[e._v("setState()")]),e._v(" 来计划进行一次 UI 更新。得益于 "),s("code",[e._v("setState()")]),e._v(" 的调用，React 能够知道 state 已经改变了，然后会重新调用 "),s("code",[e._v("render()")]),e._v(" 方法来确定页面上该显示什么。这一次，"),s("code",[e._v("render()")]),e._v(" 方法中的 "),s("code",[e._v("this.state.date")]),e._v(" 就不一样了，如此一来就会渲染输出更新过的时间。React 也会相应的更新 DOM。")]),e._v(" "),s("li",[e._v("一旦 "),s("code",[e._v("Clock")]),e._v(" 组件从 DOM 中被移除，React 就会调用 "),s("code",[e._v("componentWillUnmount()")]),e._v(" 生命周期方法，这样计时器就停止了。")])]),e._v(" "),s("h3",{attrs:{id:"正确地使用-state"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正确地使用-state"}},[e._v("#")]),e._v(" 正确地使用 State")]),e._v(" "),s("p",[e._v("关于 "),s("code",[e._v("setState()")]),e._v(" 你应该了解三件事：")]),e._v(" "),s("h3",{attrs:{id:"不要直接修改-state"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不要直接修改-state"}},[e._v("#")]),e._v(" 不要直接修改 State")]),e._v(" "),s("p",[e._v("例如，此代码不会重新渲染组件：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// Wrong\nthis.state.comment = 'Hello';\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("而是应该使用 "),s("code",[e._v("setState()")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// Correct\nthis.setState({comment: 'Hello'});\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("构造函数是唯一可以给 "),s("code",[e._v("this.state")]),e._v(" 赋值的地方。")]),e._v(" "),s("h3",{attrs:{id:"state-的更新可能是异步的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#state-的更新可能是异步的"}},[e._v("#")]),e._v(" State 的更新可能是异步的")]),e._v(" "),s("p",[e._v("出于性能考虑，React 可能会把多个 "),s("code",[e._v("setState()")]),e._v(" 调用合并成一个调用。")]),e._v(" "),s("p",[e._v("因为 "),s("code",[e._v("this.props")]),e._v(" 和 "),s("code",[e._v("this.state")]),e._v(" 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。")]),e._v(" "),s("p",[e._v("例如，此代码可能会无法更新计数器：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// Wrong\nthis.setState({\n  counter: this.state.counter + this.props.increment,\n});\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("要解决这个问题，可以让 "),s("code",[e._v("setState()")]),e._v(" 接收一个函数而不是一个对象。这个函数用上一个 state 作为第一个参数，将此次更新被应用时的 props 做为第二个参数：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// Correct\nthis.setState((state, props) => ({\n  counter: state.counter + props.increment\n}));\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("上面使用了"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions",target:"_blank",rel:"noopener noreferrer"}},[e._v("箭头函数"),s("OutboundLink")],1),e._v("，不过使用普通的函数也同样可以：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// Correct\nthis.setState(function(state, props) {\n  return {\n    counter: state.counter + props.increment\n  };\n});\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("h3",{attrs:{id:"state-的更新会被合并"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#state-的更新会被合并"}},[e._v("#")]),e._v(" State 的更新会被合并")]),e._v(" "),s("p",[e._v("当你调用 "),s("code",[e._v("setState()")]),e._v(" 的时候，React 会把你提供的对象合并到当前的 state。")]),e._v(" "),s("p",[e._v("例如，你的 state 包含几个独立的变量：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],      comments: []    };\n  }\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("然后你可以分别调用 "),s("code",[e._v("setState()")]),e._v(" 来单独地更新它们：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  componentDidMount() {\n    fetchPosts().then(response => {\n      this.setState({\n        posts: response.posts      });\n    });\n\n    fetchComments().then(response => {\n      this.setState({\n        comments: response.comments      });\n    });\n  }\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[e._v("这里的合并是浅合并，所以 "),s("code",[e._v("this.setState({comments})")]),e._v(" 完整保留了 "),s("code",[e._v("this.state.posts")]),e._v("， 但是完全替换了 "),s("code",[e._v("this.state.comments")]),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"数据是向下流动的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据是向下流动的"}},[e._v("#")]),e._v(" 数据是向下流动的")]),e._v(" "),s("p",[e._v("不管是父组件或是子组件都无法知道某个组件是有状态的还是无状态的，并且它们也并不关心它是函数组件还是 class 组件。")]),e._v(" "),s("p",[e._v("这就是为什么称 state 为局部的或是封装的的原因。除了拥有并设置了它的组件，其他组件都无法访问。")]),e._v(" "),s("p",[e._v("组件可以选择把它的 state 作为 props 向下传递到它的子组件中：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("<FormattedDate date={this.state.date} />\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v("FormattedDate")]),e._v(" 组件会在其 props 中接收参数 "),s("code",[e._v("date")]),e._v("，但是组件本身无法知道它是来自于 "),s("code",[e._v("Clock")]),e._v(" 的 state，或是 "),s("code",[e._v("Clock")]),e._v(" 的 props，还是手动输入的：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function FormattedDate(props) {\n  return <h2>It is {props.date.toLocaleTimeString()}.</h2>;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/zKRqNB?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("这通常会被叫做“自上而下”或是“单向”的数据流。任何的 state 总是所属于特定的组件，而且从该 state 派生的任何数据或 UI 只能影响树中“低于”它们的组件。")]),e._v(" "),s("p",[e._v("如果你把一个以组件构成的树想象成一个 props 的数据瀑布的话，那么每一个组件的 state 就像是在任意一点上给瀑布增加额外的水源，但是它只能向下流动。")]),e._v(" "),s("p",[e._v("为了证明每个组件都是真正独立的，我们可以创建一个渲染三个 "),s("code",[e._v("Clock")]),e._v(" 的 "),s("code",[e._v("App")]),e._v(" 组件：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function App() {\n  return (\n    <div>\n      <Clock />      <Clock />      <Clock />    </div>\n  );\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/vXdGmd?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("每个 "),s("code",[e._v("Clock")]),e._v(" 组件都会单独设置它自己的计时器并且更新它。")]),e._v(" "),s("p",[e._v("在 React 应用中，组件是有状态组件还是无状态组件属于组件实现的细节，它可能会随着时间的推移而改变。你可以在有状态的组件中使用无状态的组件，反之亦然。")]),e._v(" "),s("h2",{attrs:{id:"事件处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件处理"}},[e._v("#")]),e._v(" 事件处理")]),e._v(" "),s("p",[e._v("React 元素的事件处理和 DOM 元素的很相似，但是有一点语法上的不同：")]),e._v(" "),s("ul",[s("li",[e._v("React 事件的命名采用小驼峰式（camelCase），而不是纯小写。")]),e._v(" "),s("li",[e._v("使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。")])]),e._v(" "),s("p",[e._v("例如，传统的 HTML：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<button onclick="activateLasers()">\n  Activate Lasers\n</button>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("在 React 中略微不同：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("<button onClick={activateLasers}>  Activate Lasers\n</button>\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("在 React 中另一个不同点是你不能通过返回 "),s("code",[e._v("false")]),e._v(" 的方式阻止默认行为。你必须显式地使用 "),s("code",[e._v("preventDefault")]),e._v("。例如，传统的 HTML 中阻止表单的默认提交行为，你可以这样写：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<form onsubmit="console.log(\'You clicked submit.\'); return false">\n  <button type="submit">Submit</button>\n</form>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("在 React 中，可能是这样的：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function Form() {\n  function handleSubmit(e) {\n    e.preventDefault();    console.log('You clicked submit.');\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[e._v("在这里，"),s("code",[e._v("e")]),e._v(" 是一个合成事件。React 根据 "),s("a",{attrs:{href:"https://www.w3.org/TR/DOM-Level-3-Events/",target:"_blank",rel:"noopener noreferrer"}},[e._v("W3C 规范"),s("OutboundLink")],1),e._v("来定义这些合成事件，所以你不需要担心跨浏览器的兼容性问题。React 事件与原生事件不完全相同。如果想了解更多，请查看 "),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/events.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("SyntheticEvent")]),s("OutboundLink")],1),e._v(" 参考指南。")]),e._v(" "),s("p",[e._v("使用 React 时，你一般不需要使用 "),s("code",[e._v("addEventListener")]),e._v(" 为已创建的 DOM 元素添加监听器。事实上，你只需要在该元素初始渲染的时候添加监听器即可。")]),e._v(" "),s("p",[e._v("当你使用 "),s("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes",target:"_blank",rel:"noopener noreferrer"}},[e._v("ES6 class"),s("OutboundLink")],1),e._v(" 语法定义一个组件的时候，通常的做法是将事件处理函数声明为 class 中的方法。例如，下面的 "),s("code",[e._v("Toggle")]),e._v(" 组件会渲染一个让用户切换开关状态的按钮：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {isToggleOn: true};\n\n    // 为了在回调中使用 `this`，这个绑定是必不可少的    this.handleClick = this.handleClick.bind(this);  }\n\n  handleClick() {    this.setState(prevState => ({      isToggleOn: !prevState.isToggleOn    }));  }\n  render() {\n    return (\n      <button onClick={this.handleClick}>        {this.state.isToggleOn ? 'ON' : 'OFF'}\n      </button>\n    );\n  }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/xEmzGg?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("你必须谨慎对待 JSX 回调函数中的 "),s("code",[e._v("this")]),e._v("，在 JavaScript 中，class 的方法默认不会"),s("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind",target:"_blank",rel:"noopener noreferrer"}},[e._v("绑定"),s("OutboundLink")],1),e._v(" "),s("code",[e._v("this")]),e._v("。如果你忘记绑定 "),s("code",[e._v("this.handleClick")]),e._v(" 并把它传入了 "),s("code",[e._v("onClick")]),e._v("，当你调用这个函数的时候 "),s("code",[e._v("this")]),e._v(" 的值为 "),s("code",[e._v("undefined")]),e._v("。")]),e._v(" "),s("p",[e._v("这并不是 React 特有的行为；这其实与 "),s("a",{attrs:{href:"https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript 函数工作原理"),s("OutboundLink")],1),e._v("有关。通常情况下，如果你没有在方法后面添加 "),s("code",[e._v("()")]),e._v("，例如 "),s("code",[e._v("onClick={this.handleClick}")]),e._v("，你应该为这个方法绑定 "),s("code",[e._v("this")]),e._v("。")]),e._v(" "),s("p",[e._v("如果觉得使用 "),s("code",[e._v("bind")]),e._v(" 很麻烦，这里有两种方式可以解决。你可以使用 "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields#public_instance_fields",target:"_blank",rel:"noopener noreferrer"}},[e._v("public class fields 语法"),s("OutboundLink")],1),e._v(" to correctly bind callbacks:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class LoggingButton extends React.Component {\n  // This syntax ensures `this` is bound within handleClick.  handleClick = () => {    console.log('this is:', this);  };  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Click me\n      </button>\n    );\n  }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://github.com/facebookincubator/create-react-app",target:"_blank",rel:"noopener noreferrer"}},[e._v("Create React App"),s("OutboundLink")],1),e._v(" 默认启用此语法。")]),e._v(" "),s("p",[e._v("如果你没有使用 class fields 语法，你可以在回调中使用"),s("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions",target:"_blank",rel:"noopener noreferrer"}},[e._v("箭头函数"),s("OutboundLink")],1),e._v("：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class LoggingButton extends React.Component {\n  handleClick() {\n    console.log('this is:', this);\n  }\n\n  render() {\n    // 此语法确保 `handleClick` 内的 `this` 已被绑定。    return (      <button onClick={() => this.handleClick()}>        Click me\n      </button>\n    );\n  }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[e._v("此语法问题在于每次渲染 "),s("code",[e._v("LoggingButton")]),e._v(" 时都会创建不同的回调函数。在大多数情况下，这没什么问题，但如果该回调函数作为 prop 传入子组件时，这些组件可能会进行额外的重新渲染。我们通常建议在构造器中绑定或使用 class fields 语法来避免这类性能问题。")]),e._v(" "),s("h3",{attrs:{id:"向事件处理程序传递参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向事件处理程序传递参数"}},[e._v("#")]),e._v(" 向事件处理程序传递参数")]),e._v(" "),s("p",[e._v("在循环中，通常我们会为事件处理函数传递额外的参数。例如，若 "),s("code",[e._v("id")]),e._v(" 是你要删除那一行的 ID，以下两种方式都可以向事件处理函数传递参数：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>\n<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("上述两种方式是等价的，分别通过"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions",target:"_blank",rel:"noopener noreferrer"}},[e._v("箭头函数"),s("OutboundLink")],1),e._v("和 "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("Function.prototype.bind")]),s("OutboundLink")],1),e._v(" 来实现。")]),e._v(" "),s("p",[e._v("在这两种情况下，React 的事件对象 "),s("code",[e._v("e")]),e._v(" 会被作为第二个参数传递。如果通过箭头函数的方式，事件对象必须显式的进行传递，而通过 "),s("code",[e._v("bind")]),e._v(" 的方式，事件对象以及更多的参数将会被隐式的进行传递。")]),e._v(" "),s("h2",{attrs:{id:"条件渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件渲染"}},[e._v("#")]),e._v(" 条件渲染")]),e._v(" "),s("p",[e._v("在 React 中，你可以创建不同的组件来封装各种你需要的行为。然后，依据应用的不同状态，你可以只渲染对应状态下的部分内容。")]),e._v(" "),s("p",[e._v("React 中的条件渲染和 JavaScript 中的一样，使用 JavaScript 运算符 "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("if")]),s("OutboundLink")],1),e._v(" 或者"),s("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator",target:"_blank",rel:"noopener noreferrer"}},[e._v("条件运算符"),s("OutboundLink")],1),e._v("去创建元素来表现当前的状态，然后让 React 根据它们来更新 UI。")]),e._v(" "),s("p",[e._v("观察这两个组件:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function UserGreeting(props) {\n  return <h1>Welcome back!</h1>;\n}\n\nfunction GuestGreeting(props) {\n  return <h1>Please sign up.</h1>;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("再创建一个 "),s("code",[e._v("Greeting")]),e._v(" 组件，它会根据用户是否登录来决定显示上面的哪一个组件。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function Greeting(props) {\n  const isLoggedIn = props.isLoggedIn;\n  if (isLoggedIn) {    return <UserGreeting />;  }  return <GuestGreeting />;}\nconst root = ReactDOM.createRoot(document.getElementById('root')); \n// Try changing to isLoggedIn={true}:\nroot.render(<Greeting isLoggedIn={false} />);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/ZpVxNq?editors=0011",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("这个示例根据 "),s("code",[e._v("isLoggedIn")]),e._v(" 的值来渲染不同的问候语。")]),e._v(" "),s("h3",{attrs:{id:"元素变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元素变量"}},[e._v("#")]),e._v(" 元素变量")]),e._v(" "),s("p",[e._v("你可以使用变量来储存元素。 它可以帮助你有条件地渲染组件的一部分，而其他的渲染部分并不会因此而改变。")]),e._v(" "),s("p",[e._v("观察这两个组件，它们分别代表了注销和登录按钮：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function LoginButton(props) {\n  return (\n    <button onClick={props.onClick}>\n      Login\n    </button>\n  );\n}\n\nfunction LogoutButton(props) {\n  return (\n    <button onClick={props.onClick}>\n      Logout\n    </button>\n  );\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("p",[e._v("在下面的示例中，我们将创建一个名叫 "),s("code",[e._v("LoginControl")]),e._v(" 的"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/state-and-lifecycle.html#adding-local-state-to-a-class",target:"_blank",rel:"noopener noreferrer"}},[e._v("有状态的组件"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("它将根据当前的状态来渲染 "),s("code",[e._v("<LoginButton />")]),e._v(" 或者 "),s("code",[e._v("<LogoutButton />")]),e._v("。同时它还会渲染上一个示例中的 "),s("code",[e._v("<Greeting />")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class LoginControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleLoginClick = this.handleLoginClick.bind(this);\n    this.handleLogoutClick = this.handleLogoutClick.bind(this);\n    this.state = {isLoggedIn: false};\n  }\n\n  handleLoginClick() {\n    this.setState({isLoggedIn: true});\n  }\n\n  handleLogoutClick() {\n    this.setState({isLoggedIn: false});\n  }\n\n  render() {\n    const isLoggedIn = this.state.isLoggedIn;\n    let button;\n    if (isLoggedIn) {      button = <LogoutButton onClick={this.handleLogoutClick} />;    } else {      button = <LoginButton onClick={this.handleLoginClick} />;    }\n    return (\n      <div>\n        <Greeting isLoggedIn={isLoggedIn} />        {button}      </div>\n    );\n  }\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root')); \nroot.render(<LoginControl />);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/QKzAgB?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("声明一个变量并使用 "),s("code",[e._v("if")]),e._v(" 语句进行条件渲染是不错的方式，但有时你可能会想使用更为简洁的语法。接下来，我们将介绍几种在 JSX 中内联条件渲染的方法。")]),e._v(" "),s("h3",{attrs:{id:"与运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#与运算符"}},[e._v("#")]),e._v(" 与运算符 &&")]),e._v(" "),s("p",[e._v("通过花括号包裹代码，你可以"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 JSX 中嵌入表达式"),s("OutboundLink")],1),e._v("。这也包括 JavaScript 中的逻辑与 (&&) 运算符。它可以很方便地进行元素的条件渲染：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function Mailbox(props) {\n  const unreadMessages = props.unreadMessages;\n  return (\n    <div>\n      <h1>Hello!</h1>\n      {unreadMessages.length > 0 &&        <h2>          You have {unreadMessages.length} unread messages.        </h2>      }    </div>\n  );\n}\n\nconst messages = ['React', 'Re: React', 'Re:Re: React'];\n\nconst root = ReactDOM.createRoot(document.getElementById('root')); \nroot.render(<Mailbox unreadMessages={messages} />);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/ozJddz?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("之所以能这样做，是因为在 JavaScript 中，"),s("code",[e._v("true && expression")]),e._v(" 总是会返回 "),s("code",[e._v("expression")]),e._v(", 而 "),s("code",[e._v("false && expression")]),e._v(" 总是会返回 "),s("code",[e._v("false")]),e._v("。")]),e._v(" "),s("p",[e._v("因此，如果条件是 "),s("code",[e._v("true")]),e._v("，"),s("code",[e._v("&&")]),e._v(" 右侧的元素就会被渲染，如果是 "),s("code",[e._v("false")]),e._v("，React 会忽略并跳过它。")]),e._v(" "),s("p",[e._v("请注意，"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/Falsy",target:"_blank",rel:"noopener noreferrer"}},[e._v("falsy 表达式"),s("OutboundLink")],1),e._v(" 会使 "),s("code",[e._v("&&")]),e._v(" 后面的元素被跳过，但会返回 falsy 表达式的值。在下面示例中，render 方法的返回值是 "),s("code",[e._v("<div>0</div>")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("render() {\n  const count = 0;  return (\n    <div>\n      {count && <h1>Messages: {count}</h1>}    </div>\n  );\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("h3",{attrs:{id:"三目运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三目运算符"}},[e._v("#")]),e._v(" 三目运算符")]),e._v(" "),s("p",[e._v("另一种内联条件渲染的方法是使用 JavaScript 中的三目运算符 "),s("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("condition ? true : false")]),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("在下面这个示例中，我们用它来条件渲染一小段文本")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("render() {\n  const isLoggedIn = this.state.isLoggedIn;\n  return (\n    <div>\n      The user is <b>{isLoggedIn ? 'currently' : 'not'}</b> logged in.    </div>\n  );\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("同样的，它也可以用于较为复杂的表达式中，虽然看起来不是很直观：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("render() {\n  const isLoggedIn = this.state.isLoggedIn;\n  return (\n    <div>\n      {isLoggedIn        ? <LogoutButton onClick={this.handleLogoutClick} />\n        : <LoginButton onClick={this.handleLoginClick} />      }\n    </div>  );\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("就像在 JavaScript 中一样，你可以根据团队的习惯来选择可读性更高的代码风格。需要注意的是，如果条件变得过于复杂，那你应该考虑如何"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/components-and-props.html#extracting-components",target:"_blank",rel:"noopener noreferrer"}},[e._v("提取组件"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"阻止组件渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#阻止组件渲染"}},[e._v("#")]),e._v(" 阻止组件渲染")]),e._v(" "),s("p",[e._v("在极少数情况下，你可能希望能隐藏组件，即使它已经被其他组件渲染。若要完成此操作，你可以让 "),s("code",[e._v("render")]),e._v(" 方法直接返回 "),s("code",[e._v("null")]),e._v("，而不进行任何渲染。")]),e._v(" "),s("p",[e._v("下面的示例中，"),s("code",[e._v("<WarningBanner />")]),e._v(" 会根据 prop 中 "),s("code",[e._v("warn")]),e._v(" 的值来进行条件渲染。如果 "),s("code",[e._v("warn")]),e._v(" 的值是 "),s("code",[e._v("false")]),e._v("，那么组件则不会渲染:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function WarningBanner(props) {\n  if (!props.warn) {    return null;  }\n  return (\n    <div className=\"warning\">\n      Warning!\n    </div>\n  );\n}\n\nclass Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {showWarning: true};\n    this.handleToggleClick = this.handleToggleClick.bind(this);\n  }\n\n  handleToggleClick() {\n    this.setState(state => ({\n      showWarning: !state.showWarning\n    }));\n  }\n\n  render() {\n    return (\n      <div>\n        <WarningBanner warn={this.state.showWarning} />        <button onClick={this.handleToggleClick}>\n          {this.state.showWarning ? 'Hide' : 'Show'}\n        </button>\n      </div>\n    );\n  }\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root')); \nroot.render(<Page />);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/Xjoqwm?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("在组件的 "),s("code",[e._v("render")]),e._v(" 方法中返回 "),s("code",[e._v("null")]),e._v(" 并不会影响组件的生命周期。例如，上面这个示例中，"),s("code",[e._v("componentDidUpdate")]),e._v(" 依然会被调用。")]),e._v(" "),s("h2",{attrs:{id:"列表-key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#列表-key"}},[e._v("#")]),e._v(" 列表 & Key")]),e._v(" "),s("p",[e._v("首先，让我们看下在 Javascript 中如何转化列表。")]),e._v(" "),s("p",[e._v("如下代码，我们使用 "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("map()")]),s("OutboundLink")],1),e._v(" 函数让数组中的每一项变双倍，然后我们得到了一个新的列表 "),s("code",[e._v("doubled")]),e._v(" 并打印出来：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map((number) => number * 2);console.log(doubled);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("代码打印出 "),s("code",[e._v("[2, 4, 6, 8, 10]")]),e._v("。")]),e._v(" "),s("p",[e._v("在 React 中，把数组转化为"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/rendering-elements.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("元素"),s("OutboundLink")],1),e._v("列表的过程是相似的。")]),e._v(" "),s("h3",{attrs:{id:"渲染多个组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染多个组件"}},[e._v("#")]),e._v(" 渲染多个组件")]),e._v(" "),s("p",[e._v("你可以通过使用 "),s("code",[e._v("{}")]),e._v(" 在 JSX 内构建一个"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx",target:"_blank",rel:"noopener noreferrer"}},[e._v("元素集合"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("下面，我们使用 Javascript 中的 "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("map()")]),s("OutboundLink")],1),e._v(" 方法来遍历 "),s("code",[e._v("numbers")]),e._v(" 数组。将数组中的每个元素变成 "),s("code",[e._v("<li>")]),e._v(" 标签，最后我们将得到的数组赋值给 "),s("code",[e._v("listItems")]),e._v("：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) =>  <li>{number}</li>);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("然后，我们可以将整个 "),s("code",[e._v("listItems")]),e._v(" 插入到 "),s("code",[e._v("<ul>")]),e._v(" 元素中：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("<ul>{listItems}</ul>\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/GjPyQr?editors=0011",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("这段代码生成了一个 1 到 5 的项目符号列表。")]),e._v(" "),s("h3",{attrs:{id:"基础列表组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础列表组件"}},[e._v("#")]),e._v(" 基础列表组件")]),e._v(" "),s("p",[e._v("通常你需要在一个"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/components-and-props.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("组件"),s("OutboundLink")],1),e._v("中渲染列表。")]),e._v(" "),s("p",[e._v("我们可以把前面的例子重构成一个组件，这个组件接收 "),s("code",[e._v("numbers")]),e._v(" 数组作为参数并输出一个元素列表。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>    <li>{number}</li>  );  return (\n    <ul>{listItems}</ul>  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<NumberList numbers={numbers} />);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[e._v("当我们运行这段代码，将会看到一个警告 "),s("code",[e._v("a key should be provided for list items")]),e._v("，意思是当你创建一个元素时，必须包括一个特殊的 "),s("code",[e._v("key")]),e._v(" 属性。我们将在下一节讨论这是为什么。")]),e._v(" "),s("p",[e._v("让我们来给每个列表元素分配一个 "),s("code",[e._v("key")]),e._v(" 属性来解决上面的那个警告：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <li key={number.toString()}>      {number}\n    </li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/jrXYRR?editors=0011",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("h3",{attrs:{id:"key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#key"}},[e._v("#")]),e._v(" key")]),e._v(" "),s("p",[e._v("key 帮助 React 识别哪些元素改变了，比如被添加或删除。因此你应当给数组中的每一个元素赋予一个确定的标识。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) =>\n  <li key={number.toString()}>    {number}\n  </li>\n);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("一个元素的 key 最好是这个元素在列表中拥有的一个独一无二的字符串。通常，我们使用数据中的 id 来作为元素的 key：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const todoItems = todos.map((todo) =>\n  <li key={todo.id}>    {todo.text}\n  </li>\n);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("当元素没有确定 id 的时候，万不得已你可以使用元素索引 index 作为 key：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const todoItems = todos.map((todo, index) =>\n  // Only do this if items have no stable IDs  <li key={index}>    {todo.text}\n  </li>\n);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("如果列表项目的顺序可能会变化，我们不建议使用索引来用作 key 值，因为这样做会导致性能变差，还可能引起组件状态的问题。可以看看 Robin Pokorny 的"),s("a",{attrs:{href:"https://robinpokorny.com/blog/index-as-a-key-is-an-anti-pattern/",target:"_blank",rel:"noopener noreferrer"}},[e._v("深度解析使用索引作为 key 的负面影响"),s("OutboundLink")],1),e._v("这一篇文章。如果你选择不指定显式的 key 值，那么 React 将默认使用索引用作为列表项目的 key 值。")]),e._v(" "),s("p",[e._v("要是你有兴趣了解更多的话，这里有一篇文章"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/reconciliation.html#recursing-on-children",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入解析为什么 key 是必须的"),s("OutboundLink")],1),e._v("可以参考。")]),e._v(" "),s("h3",{attrs:{id:"用-key-提取组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用-key-提取组件"}},[e._v("#")]),e._v(" 用 key 提取组件")]),e._v(" "),s("p",[e._v("元素的 key 只有放在就近的数组上下文中才有意义。")]),e._v(" "),s("p",[e._v("比方说，如果你"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/components-and-props.html#extracting-components",target:"_blank",rel:"noopener noreferrer"}},[e._v("提取"),s("OutboundLink")],1),e._v("出一个 "),s("code",[e._v("ListItem")]),e._v(" 组件，你应该把 key 保留在数组中的这个 "),s("code",[e._v("<ListItem />")]),e._v(" 元素上，而不是放在 "),s("code",[e._v("ListItem")]),e._v(" 组件中的 "),s("code",[e._v("<li>")]),e._v(" 元素上。")]),e._v(" "),s("p",[s("strong",[e._v("例子：不正确的使用 key 的方式")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function ListItem(props) {\n  const value = props.value;\n  return (\n    // 错误！你不需要在这里指定 key：    <li key={value.toString()}>      {value}\n    </li>\n  );\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // 错误！元素的 key 应该在这里指定：    <ListItem value={number} />  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br")])]),s("p",[s("strong",[e._v("例子：正确的使用 key 的方式")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function ListItem(props) {\n  // 正确！这里不需要指定 key：  return <li>{props.value}</li>;}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // 正确！key 应该在数组的上下文中被指定    <ListItem key={number.toString()} value={number} />  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/ZXeOGM?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("一个好的经验法则是：在 "),s("code",[e._v("map()")]),e._v(" 方法中的元素需要设置 key 属性。")]),e._v(" "),s("h3",{attrs:{id:"key-值在兄弟节点之间必须唯一"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#key-值在兄弟节点之间必须唯一"}},[e._v("#")]),e._v(" key 值在兄弟节点之间必须唯一")]),e._v(" "),s("p",[e._v("数组元素中使用的 key 在其兄弟节点之间应该是独一无二的。然而，它们不需要是全局唯一的。当我们生成两个不同的数组时，我们可以使用相同的 key 值：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function Blog(props) {\n  const sidebar = (    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n  const content = props.posts.map((post) =>    <div key={post.id}>      <h3>{post.title}</h3>\n      <p>{post.content}</p>\n    </div>\n  );\n  return (\n    <div>\n      {sidebar}      <hr />\n      {content}    </div>\n  );\n}\n\nconst posts = [\n  {id: 1, title: 'Hello World', content: 'Welcome to learning React!'},\n  {id: 2, title: 'Installation', content: 'You can install React from npm.'}\n];\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Blog posts={posts} />);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/NRZYGN?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("key 会传递信息给 React ，但不会传递给你的组件。如果你的组件中需要使用 "),s("code",[e._v("key")]),e._v(" 属性的值，请用其他属性名显式传递这个值：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const content = posts.map((post) =>\n  <Post\n    key={post.id}    id={post.id}    title={post.title} />\n);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("上面例子中，"),s("code",[e._v("Post")]),e._v(" 组件可以读出 "),s("code",[e._v("props.id")]),e._v("，但是不能读出 "),s("code",[e._v("props.key")]),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"在-jsx-中嵌入-map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-jsx-中嵌入-map"}},[e._v("#")]),e._v(" 在 JSX 中嵌入 map()")]),e._v(" "),s("p",[e._v("在上面的例子中，我们声明了一个单独的 "),s("code",[e._v("listItems")]),e._v(" 变量并将其包含在 JSX 中：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>    <ListItem key={number.toString()}              value={number} />  );  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("JSX 允许在大括号中"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx",target:"_blank",rel:"noopener noreferrer"}},[e._v("嵌入任何表达式"),s("OutboundLink")],1),e._v("，所以我们可以内联 "),s("code",[e._v("map()")]),e._v(" 返回的结果：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function NumberList(props) {\n  const numbers = props.numbers;\n  return (\n    <ul>\n      {numbers.map((number) =>        <ListItem key={number.toString()}                  value={number} />      )}    </ul>\n  );\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/BLvYrB?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("这么做有时可以使你的代码更清晰，但有时这种风格也会被滥用。就像在 JavaScript 中一样，何时需要为了可读性提取出一个变量，这完全取决于你。但请记住，如果一个 "),s("code",[e._v("map()")]),e._v(" 嵌套了太多层级，那可能就是你"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/components-and-props.html#extracting-components",target:"_blank",rel:"noopener noreferrer"}},[e._v("提取组件"),s("OutboundLink")],1),e._v("的一个好时机。")]),e._v(" "),s("h2",{attrs:{id:"表单"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表单"}},[e._v("#")]),e._v(" 表单")]),e._v(" "),s("p",[e._v("在 React 里，HTML 表单元素的工作方式和其他的 DOM 元素有些不同，这是因为表单元素通常会保持一些内部的 state。例如这个纯 HTML 表单只接受一个名称：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<form>\n  <label>\n    名字:\n    <input type="text" name="name" />\n  </label>\n  <input type="submit" value="提交" />\n</form>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("此表单具有默认的 HTML 表单行为，即在用户提交表单后浏览到新页面。如果你在 React 中执行相同的代码，它依然有效。但大多数情况下，使用 JavaScript 函数可以很方便的处理表单的提交， 同时还可以访问用户填写的表单数据。实现这种效果的标准方式是使用“受控组件”。")]),e._v(" "),s("h3",{attrs:{id:"受控组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#受控组件"}},[e._v("#")]),e._v(" 受控组件")]),e._v(" "),s("p",[e._v("在 HTML 中，表单元素（如"),s("code",[e._v("<input>")]),e._v("、 "),s("code",[e._v("<textarea>")]),e._v(" 和 "),s("code",[e._v("<select>")]),e._v("）通常自己维护 state，并根据用户输入进行更新。而在 React 中，可变状态（mutable state）通常保存在组件的 state 属性中，并且只能通过使用 "),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/react-component.html#setstate",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("setState()")]),s("OutboundLink")],1),e._v("来更新。")]),e._v(" "),s("p",[e._v("我们可以把两者结合起来，使 React 的 state 成为“唯一数据源”。渲染表单的 React 组件还控制着用户输入过程中表单发生的操作。被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”。")]),e._v(" "),s("p",[e._v("例如，如果我们想让前一个示例在提交时打印出名称，我们可以将表单写为受控组件：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('class NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: \'\'};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {    this.setState({value: event.target.value});  }\n  handleSubmit(event) {\n    alert(\'提交的名字: \' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>        <label>\n          名字:\n          <input type="text" value={this.state.value} onChange={this.handleChange} />        </label>\n        <input type="submit" value="提交" />\n      </form>\n    );\n  }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/VmmPgp?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("由于在表单元素上设置了 "),s("code",[e._v("value")]),e._v(" 属性，因此显示的值将始终为 "),s("code",[e._v("this.state.value")]),e._v("，这使得 React 的 state 成为唯一数据源。由于 "),s("code",[e._v("handlechange")]),e._v(" 在每次按键时都会执行并更新 React 的 state，因此显示的值将随着用户输入而更新。")]),e._v(" "),s("p",[e._v("对于受控组件来说，输入的值始终由 React 的 state 驱动。你也可以将 value 传递给其他 UI 元素，或者通过其他事件处理函数重置，但这意味着你需要编写更多的代码。")]),e._v(" "),s("h3",{attrs:{id:"textarea-标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#textarea-标签"}},[e._v("#")]),e._v(" textarea 标签")]),e._v(" "),s("p",[e._v("在 HTML 中, "),s("code",[e._v("<textarea>")]),e._v(" 元素通过其子元素定义其文本:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("<textarea>\n  你好， 这是在 text area 里的文本\n</textarea>\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("而在 React 中，"),s("code",[e._v("<textarea>")]),e._v(" 使用 "),s("code",[e._v("value")]),e._v(" 属性代替。这样，可以使得使用 "),s("code",[e._v("<textarea>")]),e._v(" 的表单和使用单行 input 的表单非常类似：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class EssayForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {      value: '请撰写一篇关于你喜欢的 DOM 元素的文章.'    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {    this.setState({value: event.target.value});  }\n  handleSubmit(event) {\n    alert('提交的文章: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          文章:\n          <textarea value={this.state.value} onChange={this.handleChange} />        </label>\n        <input type=\"submit\" value=\"提交\" />\n      </form>\n    );\n  }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br")])]),s("p",[e._v("请注意，"),s("code",[e._v("this.state.value")]),e._v(" 初始化于构造函数中，因此文本区域默认有初值。")]),e._v(" "),s("h3",{attrs:{id:"select-标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#select-标签"}},[e._v("#")]),e._v(" select 标签")]),e._v(" "),s("p",[e._v("在 HTML 中，"),s("code",[e._v("<select>")]),e._v(" 创建下拉列表标签。例如，如下 HTML 创建了水果相关的下拉列表：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<select>\n  <option value="grapefruit">葡萄柚</option>\n  <option value="lime">酸橙</option>\n  <option selected value="coconut">椰子</option>\n  <option value="mango">芒果</option>\n</select>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("请注意，由于 "),s("code",[e._v("selected")]),e._v(" 属性的缘故，椰子选项默认被选中。React 并不会使用 "),s("code",[e._v("selected")]),e._v(" 属性，而是在根 "),s("code",[e._v("select")]),e._v(" 标签上使用 "),s("code",[e._v("value")]),e._v(" 属性。这在受控组件中更便捷，因为您只需要在根标签中更新它。例如：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('class FlavorForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: \'coconut\'};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {    this.setState({value: event.target.value});  }\n  handleSubmit(event) {\n    alert(\'你喜欢的风味是: \' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          选择你喜欢的风味:\n          <select value={this.state.value} onChange={this.handleChange}>            <option value="grapefruit">葡萄柚</option>\n            <option value="lime">酸橙</option>\n            <option value="coconut">椰子</option>\n            <option value="mango">芒果</option>\n          </select>\n        </label>\n        <input type="submit" value="提交" />\n      </form>\n    );\n  }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/JbbEzX?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("总的来说，这使得 "),s("code",[e._v('<input type="text">')]),e._v(", "),s("code",[e._v("<textarea>")]),e._v(" 和 "),s("code",[e._v("<select>")]),e._v(" 之类的标签都非常相似—它们都接受一个 "),s("code",[e._v("value")]),e._v(" 属性，你可以使用它来实现受控组件。")]),e._v(" "),s("blockquote",[s("p",[e._v("注意")]),e._v(" "),s("p",[e._v("你可以将数组传递到 "),s("code",[e._v("value")]),e._v(" 属性中，以支持在 "),s("code",[e._v("select")]),e._v(" 标签中选择多个选项：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("<select multiple={true} value={['B', 'C']}>\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])])]),e._v(" "),s("h3",{attrs:{id:"文件-input-标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件-input-标签"}},[e._v("#")]),e._v(" 文件 input 标签")]),e._v(" "),s("p",[e._v("在 HTML 中，"),s("code",[e._v('<input type="file">')]),e._v(" 允许用户从存储设备中选择一个或多个文件，将其上传到服务器，或通过使用 JavaScript 的 "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications",target:"_blank",rel:"noopener noreferrer"}},[e._v("File API"),s("OutboundLink")],1),e._v(" 进行控制。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<input type="file" />\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("因为它的 value 只读，所以它是 React 中的一个"),s("strong",[e._v("非受控")]),e._v("组件。将与其他非受控组件"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/uncontrolled-components.html#the-file-input-tag",target:"_blank",rel:"noopener noreferrer"}},[e._v("在后续文档中"),s("OutboundLink")],1),e._v("一起讨论。")]),e._v(" "),s("h3",{attrs:{id:"处理多个输入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理多个输入"}},[e._v("#")]),e._v(" 处理多个输入")]),e._v(" "),s("p",[e._v("当需要处理多个 "),s("code",[e._v("input")]),e._v(" 元素时，我们可以给每个元素添加 "),s("code",[e._v("name")]),e._v(" 属性，并让处理函数根据 "),s("code",[e._v("event.target.name")]),e._v(" 的值选择要执行的操作。")]),e._v(" "),s("p",[e._v("例如：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('class Reservation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isGoing: true,\n      numberOfGuests: 2\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === \'checkbox\' ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value    });\n  }\n\n  render() {\n    return (\n      <form>\n        <label>\n          参与:\n          <input\n            name="isGoing"            type="checkbox"\n            checked={this.state.isGoing}\n            onChange={this.handleInputChange} />\n        </label>\n        <br />\n        <label>\n          来宾人数:\n          <input\n            name="numberOfGuests"            type="number"\n            value={this.state.numberOfGuests}\n            onChange={this.handleInputChange} />\n        </label>\n      </form>\n    );\n  }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br"),s("span",{staticClass:"line-number"},[e._v("40")]),s("br"),s("span",{staticClass:"line-number"},[e._v("41")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/wgedvV?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("这里使用了 ES6 "),s("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names",target:"_blank",rel:"noopener noreferrer"}},[e._v("计算属性名称"),s("OutboundLink")],1),e._v("的语法更新给定输入名称对应的 state 值：")]),e._v(" "),s("p",[e._v("例如：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("this.setState({\n  [name]: value});\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("等同 ES5:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var partialState = {};\npartialState[name] = value;this.setState(partialState);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("另外，由于 "),s("code",[e._v("setState()")]),e._v(" 自动"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/state-and-lifecycle.html#state-updates-are-merged",target:"_blank",rel:"noopener noreferrer"}},[e._v("将部分 state 合并到当前 state"),s("OutboundLink")],1),e._v(", 只需调用它更改部分 state 即可。")]),e._v(" "),s("h3",{attrs:{id:"受控输入空值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#受控输入空值"}},[e._v("#")]),e._v(" 受控输入空值")]),e._v(" "),s("p",[e._v("在"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/forms.html#controlled-components",target:"_blank",rel:"noopener noreferrer"}},[e._v("受控组件"),s("OutboundLink")],1),e._v("上指定 "),s("code",[e._v("value")]),e._v(" 的 prop 会阻止用户更改输入。如果你指定了 "),s("code",[e._v("value")]),e._v("，但输入仍可编辑，则可能是你意外地将 "),s("code",[e._v("value")]),e._v(" 设置为 "),s("code",[e._v("undefined")]),e._v(" 或 "),s("code",[e._v("null")]),e._v("。")]),e._v(" "),s("p",[e._v("下面的代码演示了这一点。（输入最初被锁定，但在短时间延迟后变为可编辑。）")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('ReactDOM.createRoot(mountNode).render(<input value="hi" />);\n\nsetTimeout(function() {\n  ReactDOM.createRoot(mountNode).render(<input value={null} />);\n}, 1000);\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h3",{attrs:{id:"受控组件的替代品"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#受控组件的替代品"}},[e._v("#")]),e._v(" 受控组件的替代品")]),e._v(" "),s("p",[e._v("有时使用受控组件会很麻烦，因为你需要为数据变化的每种方式都编写事件处理函数，并通过一个 React 组件传递所有的输入 state。当你将之前的代码库转换为 React 或将 React 应用程序与非 React 库集成时，这可能会令人厌烦。在这些情况下，你可能希望使用"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/uncontrolled-components.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("非受控组件"),s("OutboundLink")],1),e._v(", 这是实现输入表单的另一种方式。")]),e._v(" "),s("h3",{attrs:{id:"成熟的解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成熟的解决方案"}},[e._v("#")]),e._v(" 成熟的解决方案")]),e._v(" "),s("p",[e._v("如果你想寻找包含验证、追踪访问字段以及处理表单提交的完整解决方案，使用 "),s("a",{attrs:{href:"https://jaredpalmer.com/formik",target:"_blank",rel:"noopener noreferrer"}},[e._v("Formik"),s("OutboundLink")],1),e._v(" 是不错的选择。然而，它也是建立在受控组件和管理 state 的基础之上 —— 所以不要忽视学习它们。")]),e._v(" "),s("h2",{attrs:{id:"状态提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态提升"}},[e._v("#")]),e._v(" 状态提升")]),e._v(" "),s("p",[e._v("通常，多个组件需要反映相同的变化数据，这时我们建议将共享状态提升到最近的共同父组件中去。让我们看看它是如何运作的。")]),e._v(" "),s("p",[e._v("在本节中，我们将创建一个用于计算水在给定温度下是否会沸腾的温度计算器。")]),e._v(" "),s("p",[e._v("我们将从一个名为 "),s("code",[e._v("BoilingVerdict")]),e._v(" 的组件开始，它接受 "),s("code",[e._v("celsius")]),e._v(" 温度作为一个 prop，并据此打印出该温度是否足以将水煮沸的结果。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function BoilingVerdict(props) {\n  if (props.celsius >= 100) {\n    return <p>The water would boil.</p>;  }\n  return <p>The water would not boil.</p>;}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("接下来, 我们创建一个名为 "),s("code",[e._v("Calculator")]),e._v(" 的组件。它渲染一个用于输入温度的 "),s("code",[e._v("<input>")]),e._v("，并将其值保存在 "),s("code",[e._v("this.state.temperature")]),e._v(" 中。")]),e._v(" "),s("p",[e._v("另外, 它根据当前输入值渲染 "),s("code",[e._v("BoilingVerdict")]),e._v(" 组件。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});  }\n\n  render() {\n    const temperature = this.state.temperature;    return (\n      <fieldset>\n        <legend>Enter temperature in Celsius:</legend>\n        <input          value={temperature}          onChange={this.handleChange} />        <BoilingVerdict          celsius={parseFloat(temperature)} />      </fieldset>\n    );\n  }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/ZXeOBm?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("h3",{attrs:{id:"添加第二个输入框"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加第二个输入框"}},[e._v("#")]),e._v(" 添加第二个输入框")]),e._v(" "),s("p",[e._v("我们的新需求是，在已有摄氏温度输入框的基础上，我们提供华氏度的输入框，并保持两个输入框的数据同步。")]),e._v(" "),s("p",[e._v("我们先从 "),s("code",[e._v("Calculator")]),e._v(" 组件中抽离出 "),s("code",[e._v("TemperatureInput")]),e._v(" 组件，然后为其添加一个新的 "),s("code",[e._v("scale")]),e._v(" prop，它可以是 "),s("code",[e._v('"c"')]),e._v(" 或是 "),s("code",[e._v('"f"')]),e._v("：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const scaleNames = {  c: 'Celsius',  f: 'Fahrenheit'};\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};\n  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});\n  }\n\n  render() {\n    const temperature = this.state.temperature;\n    const scale = this.props.scale;    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>        <input value={temperature}\n               onChange={this.handleChange} />\n      </fieldset>\n    );\n  }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br")])]),s("p",[e._v("我们现在可以修改 "),s("code",[e._v("Calculator")]),e._v(" 组件让它渲染两个独立的温度输入框组件：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('class Calculator extends React.Component {\n  render() {\n    return (\n      <div>\n        <TemperatureInput scale="c" />        <TemperatureInput scale="f" />      </div>\n    );\n  }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/jGBryx?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("我们现在有了两个输入框，但当你在其中一个输入温度时，另一个并不会更新。这与我们的要求相矛盾：我们希望让它们保持同步。")]),e._v(" "),s("p",[e._v("另外，我们也不能通过 "),s("code",[e._v("Calculator")]),e._v(" 组件展示 "),s("code",[e._v("BoilingVerdict")]),e._v(" 组件的渲染结果。因为 "),s("code",[e._v("Calculator")]),e._v(" 组件并不知道隐藏在 "),s("code",[e._v("TemperatureInput")]),e._v(" 组件中的当前温度是多少。")]),e._v(" "),s("h3",{attrs:{id:"编写转换函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编写转换函数"}},[e._v("#")]),e._v(" 编写转换函数")]),e._v(" "),s("p",[e._v("首先，我们将编写两个可以在摄氏度与华氏度之间相互转换的函数：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return (celsius * 9 / 5) + 32;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("上述两个函数仅做数值转换。而我们将编写另一个函数，它接受字符串类型的 "),s("code",[e._v("temperature")]),e._v(" 和转换函数作为参数并返回一个字符串。我们将使用它来依据一个输入框的值计算出另一个输入框的值。")]),e._v(" "),s("p",[e._v("当输入 "),s("code",[e._v("temperature")]),e._v(" 的值无效时，函数返回空字符串，反之，则返回保留三位小数并四舍五入后的转换结果：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n  if (Number.isNaN(input)) {\n    return '';\n  }\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[e._v("例如，"),s("code",[e._v("tryConvert('abc', toCelsius)")]),e._v(" 返回一个空字符串，而 "),s("code",[e._v("tryConvert('10.22', toFahrenheit)")]),e._v(" 返回 "),s("code",[e._v("'50.396'")]),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"状态提升-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态提升-2"}},[e._v("#")]),e._v(" 状态提升")]),e._v(" "),s("p",[e._v("到目前为止, 两个 "),s("code",[e._v("TemperatureInput")]),e._v(" 组件均在各自内部的 state 中相互独立地保存着各自的数据。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});  }\n\n  render() {\n    const temperature = this.state.temperature;    // ...  \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[e._v("然而，我们希望两个输入框内的数值彼此能够同步。当我们更新摄氏度输入框内的数值时，华氏度输入框内应当显示转换后的华氏温度，反之亦然。")]),e._v(" "),s("p",[e._v("在 React 中，将多个组件中需要共享的 state 向上移动到它们的最近共同父组件中，便可实现共享 state。这就是所谓的“状态提升”。接下来，我们将 "),s("code",[e._v("TemperatureInput")]),e._v(" 组件中的 state 移动至 "),s("code",[e._v("Calculator")]),e._v(" 组件中去。")]),e._v(" "),s("p",[e._v("如果 "),s("code",[e._v("Calculator")]),e._v(" 组件拥有了共享的 state，它将成为两个温度输入框中当前温度的“数据源”。它能够使得两个温度输入框的数值彼此保持一致。由于两个 "),s("code",[e._v("TemperatureInput")]),e._v(" 组件的 props 均来自共同的父组件 "),s("code",[e._v("Calculator")]),e._v("，因此两个输入框中的内容将始终保持一致。")]),e._v(" "),s("p",[e._v("让我们看看这是如何一步一步实现的。")]),e._v(" "),s("p",[e._v("首先，我们将 "),s("code",[e._v("TemperatureInput")]),e._v(" 组件中的 "),s("code",[e._v("this.state.temperature")]),e._v(" 替换为 "),s("code",[e._v("this.props.temperature")]),e._v("。现在，我们先假定 "),s("code",[e._v("this.props.temperature")]),e._v(" 已经存在，尽管将来我们需要通过 "),s("code",[e._v("Calculator")]),e._v(" 组件将其传入：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  render() {\n    // Before: const temperature = this.state.temperature;\n    const temperature = this.props.temperature;    // ...\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("我们知道 "),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/components-and-props.html#props-are-read-only",target:"_blank",rel:"noopener noreferrer"}},[e._v("props 是只读的"),s("OutboundLink")],1),e._v("。当 "),s("code",[e._v("temperature")]),e._v(" 存在于 "),s("code",[e._v("TemperatureInput")]),e._v(" 组件的 state 中时，组件调用 "),s("code",[e._v("this.setState()")]),e._v(" 便可修改它。然而，"),s("code",[e._v("temperature")]),e._v(" 是由父组件传入的 prop，"),s("code",[e._v("TemperatureInput")]),e._v(" 组件便失去了对它的控制权。")]),e._v(" "),s("p",[e._v("在 React 中，这个问题通常是通过使用“受控组件”来解决的。与 DOM 中的 "),s("code",[e._v("<input>")]),e._v(" 接受 "),s("code",[e._v("value")]),e._v(" 和 "),s("code",[e._v("onChange")]),e._v(" 一样，自定义的 "),s("code",[e._v("TemperatureInput")]),e._v(" 组件接受 "),s("code",[e._v("temperature")]),e._v(" 和 "),s("code",[e._v("onTemperatureChange")]),e._v(" 这两个来自父组件 "),s("code",[e._v("Calculator")]),e._v(" 的 props。")]),e._v(" "),s("p",[e._v("现在，当 "),s("code",[e._v("TemperatureInput")]),e._v(" 组件想更新温度时，需调用 "),s("code",[e._v("this.props.onTemperatureChange")]),e._v(" 来更新它：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  handleChange(e) {\n    // Before: this.setState({temperature: e.target.value});\n    this.props.onTemperatureChange(e.target.value);    // ...\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("blockquote",[s("p",[e._v("注意：")]),e._v(" "),s("p",[e._v("自定义组件中的 "),s("code",[e._v("temperature")]),e._v(" 和 "),s("code",[e._v("onTemperatureChange")]),e._v(" 这两个 prop 的命名没有任何特殊含义。我们可以给它们取其它任意的名字，例如，把它们命名为 "),s("code",[e._v("value")]),e._v(" 和 "),s("code",[e._v("onChange")]),e._v(" 就是一种习惯。")])]),e._v(" "),s("p",[s("code",[e._v("onTemperatureChange")]),e._v(" 的 prop 和 "),s("code",[e._v("temperature")]),e._v(" 的 prop 一样，均由父组件 "),s("code",[e._v("Calculator")]),e._v(" 提供。它通过修改父组件自身的内部 state 来处理数据的变化，进而使用新的数值重新渲染两个输入框。我们将很快看到修改后的 "),s("code",[e._v("Calculator")]),e._v(" 组件效果。")]),e._v(" "),s("p",[e._v("在深入研究 "),s("code",[e._v("Calculator")]),e._v(" 组件的变化之前，让我们回顾一下 "),s("code",[e._v("TemperatureInput")]),e._v(" 组件的变化。我们移除组件自身的 state，通过使用 "),s("code",[e._v("this.props.temperature")]),e._v(" 替代 "),s("code",[e._v("this.state.temperature")]),e._v(" 来读取温度数据。当我们想要响应数据改变时，我们需要调用 "),s("code",[e._v("Calculator")]),e._v(" 组件提供的 "),s("code",[e._v("this.props.onTemperatureChange()")]),e._v("，而不再使用 "),s("code",[e._v("this.setState()")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);  }\n\n  render() {\n    const temperature = this.props.temperature;    const scale = this.props.scale;\n    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\n        <input value={temperature}\n               onChange={this.handleChange} />\n      </fieldset>\n    );\n  }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br")])]),s("p",[e._v("现在，让我们把目光转向 "),s("code",[e._v("Calculator")]),e._v(" 组件。")]),e._v(" "),s("p",[e._v("我们会把当前输入的 "),s("code",[e._v("temperature")]),e._v(" 和 "),s("code",[e._v("scale")]),e._v(" 保存在组件内部的 state 中。这个 state 就是从两个输入框组件中“提升”而来的，并且它将用作两个输入框组件的共同“数据源”。这是我们为了渲染两个输入框所需要的所有数据的最小表示。")]),e._v(" "),s("p",[e._v("例如，当我们在摄氏度输入框中键入 37 时，"),s("code",[e._v("Calculator")]),e._v(" 组件中的 state 将会是：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("{\n  temperature: '37',\n  scale: 'c'\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("如果我们之后修改华氏度的输入框中的内容为 212 时，"),s("code",[e._v("Calculator")]),e._v(" 组件中的 state 将会是：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("{\n  temperature: '212',\n  scale: 'f'\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("我们可以存储两个输入框中的值，但这并不是必要的。我们只需要存储最近修改的温度及其计量单位即可，根据当前的 "),s("code",[e._v("temperature")]),e._v(" 和 "),s("code",[e._v("scale")]),e._v(" 就可以计算出另一个输入框的值。")]),e._v(" "),s("p",[e._v("由于两个输入框中的数值由同一个 state 计算而来，因此它们始终保持同步：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = {temperature: '', scale: 'c'};  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({scale: 'c', temperature});  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({scale: 'f', temperature});  }\n\n  render() {\n    const scale = this.state.scale;    const temperature = this.state.temperature;    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n    return (\n      <div>\n        <TemperatureInput\n          scale=\"c\"\n          temperature={celsius}          onTemperatureChange={this.handleCelsiusChange} />        <TemperatureInput\n          scale=\"f\"\n          temperature={fahrenheit}          onTemperatureChange={this.handleFahrenheitChange} />        <BoilingVerdict\n          celsius={parseFloat(celsius)} />      </div>\n    );\n  }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/WZpxpz?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("现在无论你编辑哪个输入框中的内容，"),s("code",[e._v("Calculator")]),e._v(" 组件中的 "),s("code",[e._v("this.state.temperature")]),e._v(" 和 "),s("code",[e._v("this.state.scale")]),e._v(" 均会被更新。其中一个输入框保留用户的输入并取值，另一个输入框始终基于这个值显示转换后的结果。")]),e._v(" "),s("p",[e._v("让我们来重新梳理一下当你对输入框内容进行编辑时会发生些什么：")]),e._v(" "),s("ul",[s("li",[e._v("React 会调用 DOM 中 "),s("code",[e._v("<input>")]),e._v(" 的 "),s("code",[e._v("onChange")]),e._v(" 方法。在本实例中，它是 "),s("code",[e._v("TemperatureInput")]),e._v(" 组件的 "),s("code",[e._v("handleChange")]),e._v(" 方法。")]),e._v(" "),s("li",[s("code",[e._v("TemperatureInput")]),e._v(" 组件中的 "),s("code",[e._v("handleChange")]),e._v(" 方法会调用 "),s("code",[e._v("this.props.onTemperatureChange()")]),e._v("，并传入新输入的值作为参数。其 props 诸如 "),s("code",[e._v("onTemperatureChange")]),e._v(" 之类，均由父组件 "),s("code",[e._v("Calculator")]),e._v(" 提供。")]),e._v(" "),s("li",[e._v("起初渲染时，用于摄氏度输入的子组件 "),s("code",[e._v("TemperatureInput")]),e._v(" 中的 "),s("code",[e._v("onTemperatureChange")]),e._v(" 方法与 "),s("code",[e._v("Calculator")]),e._v(" 组件中的 "),s("code",[e._v("handleCelsiusChange")]),e._v(" 方法相同，而，用于华氏度输入的子组件 "),s("code",[e._v("TemperatureInput")]),e._v(" 中的 "),s("code",[e._v("onTemperatureChange")]),e._v(" 方法与 "),s("code",[e._v("Calculator")]),e._v(" 组件中的 "),s("code",[e._v("handleFahrenheitChange")]),e._v(" 方法相同。因此，无论哪个输入框被编辑都会调用 "),s("code",[e._v("Calculator")]),e._v(" 组件中对应的方法。")]),e._v(" "),s("li",[e._v("在这些方法内部，"),s("code",[e._v("Calculator")]),e._v(" 组件通过使用新的输入值与当前输入框对应的温度计量单位来调用 "),s("code",[e._v("this.setState()")]),e._v(" 进而请求 React 重新渲染自己本身。")]),e._v(" "),s("li",[e._v("React 调用 "),s("code",[e._v("Calculator")]),e._v(" 组件的 "),s("code",[e._v("render")]),e._v(" 方法得到组件的 UI 呈现。温度转换在这时进行，两个输入框中的数值通过当前输入温度和其计量单位来重新计算获得。")]),e._v(" "),s("li",[e._v("React 使用 "),s("code",[e._v("Calculator")]),e._v(" 组件提供的新 props 分别调用两个 "),s("code",[e._v("TemperatureInput")]),e._v(" 子组件的 "),s("code",[e._v("render")]),e._v(" 方法来获取子组件的 UI 呈现。")]),e._v(" "),s("li",[e._v("React 调用 "),s("code",[e._v("BoilingVerdict")]),e._v(" 组件的 "),s("code",[e._v("render")]),e._v(" 方法，并将摄氏温度值以组件 props 方式传入。")]),e._v(" "),s("li",[e._v("React DOM 根据输入值匹配水是否沸腾，并将结果更新至 DOM。我们刚刚编辑的输入框接收其当前值，另一个输入框内容更新为转换后的温度值。")])]),e._v(" "),s("p",[e._v("得益于每次的更新都经历相同的步骤，两个输入框的内容才能始终保持同步。")]),e._v(" "),s("h3",{attrs:{id:"学习小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#学习小结"}},[e._v("#")]),e._v(" 学习小结")]),e._v(" "),s("p",[e._v("在 React 应用中，任何可变数据应当只有一个相对应的唯一“数据源”。通常，state 都是首先添加到需要渲染数据的组件中去。然后，如果其他组件也需要这个 state，那么你可以将它提升至这些组件的最近共同父组件中。你应当依靠"),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/state-and-lifecycle.html#the-data-flows-down",target:"_blank",rel:"noopener noreferrer"}},[e._v("自上而下的数据流"),s("OutboundLink")],1),e._v("，而不是尝试在不同组件间同步 state。")]),e._v(" "),s("p",[e._v("虽然提升 state 方式比双向绑定方式需要编写更多的“样板”代码，但带来的好处是，排查和隔离 bug 所需的工作量将会变少。由于“存在”于组件中的任何 state，仅有组件自己能够修改它，因此 bug 的排查范围被大大缩减了。此外，你也可以使用自定义逻辑来拒绝或转换用户的输入。")]),e._v(" "),s("p",[e._v("如果某些数据可以由 props 或 state 推导得出，那么它就不应该存在于 state 中。举个例子，本例中我们没有将 "),s("code",[e._v("celsiusValue")]),e._v(" 和 "),s("code",[e._v("fahrenheitValue")]),e._v(" 一起保存，而是仅保存了最后修改的 "),s("code",[e._v("temperature")]),e._v(" 和它的 "),s("code",[e._v("scale")]),e._v("。这是因为另一个输入框的温度值始终可以通过这两个值以及组件的 "),s("code",[e._v("render()")]),e._v(" 方法获得。这使得我们能够清除输入框内容，亦或是，在不损失用户操作的输入框内数值精度的前提下对另一个输入框内的转换数值做四舍五入的操作。")]),e._v(" "),s("p",[e._v("当你在 UI 中发现错误时，可以使用 "),s("a",{attrs:{href:"https://github.com/facebook/react/tree/main/packages/react-devtools",target:"_blank",rel:"noopener noreferrer"}},[e._v("React 开发者工具"),s("OutboundLink")],1),e._v(" 来检查问题组件的 props，并且按照组件树结构逐级向上搜寻，直到定位到负责更新 state 的那个组件。这使得你能够追踪到产生 bug 的源头：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://zh-hans.reactjs.org/ef94afc3447d75cdc245c77efb0d63be/react-devtools-state.gif",alt:"Monitoring State in React DevTools"}})]),e._v(" "),s("h2",{attrs:{id:"组合-vs-继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组合-vs-继承"}},[e._v("#")]),e._v(" 组合 vs 继承")]),e._v(" "),s("p",[e._v("React 有十分强大的组合模式。我们推荐使用组合而非继承来实现组件间的代码重用。")]),e._v(" "),s("p",[e._v("在这篇文档中，我们将考虑初学 React 的开发人员使用继承时经常会遇到的一些问题，并展示如何通过组合思想来解决这些问题。")]),e._v(" "),s("h3",{attrs:{id:"包含关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包含关系"}},[e._v("#")]),e._v(" 包含关系")]),e._v(" "),s("p",[e._v("有些组件无法提前知晓它们子组件的具体内容。在 "),s("code",[e._v("Sidebar")]),e._v("（侧边栏）和 "),s("code",[e._v("Dialog")]),e._v("（对话框）等展现通用容器（box）的组件中特别容易遇到这种情况。")]),e._v(" "),s("p",[e._v("我们建议这些组件使用一个特殊的 "),s("code",[e._v("children")]),e._v(" prop 来将他们的子组件传递到渲染结果中：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function FancyBorder(props) {\n  return (\n    <div className={'FancyBorder FancyBorder-' + props.color}>\n      {props.children}    </div>\n  );\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("这使得别的组件可以通过 JSX 嵌套，将任意组件作为子组件传递给它们。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('function WelcomeDialog() {\n  return (\n    <FancyBorder color="blue">\n      <h1 className="Dialog-title">        Welcome      </h1>      <p className="Dialog-message">        Thank you for visiting our spacecraft!      </p>    </FancyBorder>\n  );\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[s("strong",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/ozqNOV?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 CodePen 上尝试"),s("OutboundLink")],1)])]),e._v(" "),s("p",[s("code",[e._v("<FancyBorder>")]),e._v(" JSX 标签中的所有内容都会作为一个 "),s("code",[e._v("children")]),e._v(" prop 传递给 "),s("code",[e._v("FancyBorder")]),e._v(" 组件。因为 "),s("code",[e._v("FancyBorder")]),e._v(" 将 "),s("code",[e._v("{props.children}")]),e._v(" 渲染在一个 "),s("code",[e._v("<div>")]),e._v(" 中，被传递的这些子组件最终都会出现在输出结果中。")]),e._v(" "),s("p",[e._v("少数情况下，你可能需要在一个组件中预留出几个“洞”。这种情况下，我们可以不使用 "),s("code",[e._v("children")]),e._v("，而是自行约定：将所需内容传入 props，并使用相应的 prop。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('function SplitPane(props) {\n  return (\n    <div className="SplitPane">\n      <div className="SplitPane-left">\n        {props.left}      </div>\n      <div className="SplitPane-right">\n        {props.right}      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <SplitPane\n      left={\n        <Contacts />      }\n      right={\n        <Chat />      } />\n  );\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/gwZOJp?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[s("code",[e._v("<Contacts />")]),e._v(" 和 "),s("code",[e._v("<Chat />")]),e._v(" 之类的 React 元素本质就是对象（object），所以你可以把它们当作 props，像其他数据一样传递。这种方法可能使你想起别的库中“槽”（slot）的概念，但在 React 中没有“槽”这一概念的限制，你可以将任何东西作为 props 进行传递。")]),e._v(" "),s("h3",{attrs:{id:"特例关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特例关系"}},[e._v("#")]),e._v(" 特例关系")]),e._v(" "),s("p",[e._v("有些时候，我们会把一些组件看作是其他组件的特殊实例，比如 "),s("code",[e._v("WelcomeDialog")]),e._v(" 可以说是 "),s("code",[e._v("Dialog")]),e._v(" 的特殊实例。")]),e._v(" "),s("p",[e._v("在 React 中，我们也可以通过组合来实现这一点。“特殊”组件可以通过 props 定制并渲染“一般”组件：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('function Dialog(props) {\n  return (\n    <FancyBorder color="blue">\n      <h1 className="Dialog-title">\n        {props.title}      </h1>\n      <p className="Dialog-message">\n        {props.message}      </p>\n    </FancyBorder>\n  );\n}\n\nfunction WelcomeDialog() {\n  return (\n    <Dialog      title="Welcome"      message="Thank you for visiting our spacecraft!" />  );\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/kkEaOZ?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("组合也同样适用于以 class 形式定义的组件。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('function Dialog(props) {\n  return (\n    <FancyBorder color="blue">\n      <h1 className="Dialog-title">\n        {props.title}\n      </h1>\n      <p className="Dialog-message">\n        {props.message}\n      </p>\n      {props.children}    </FancyBorder>\n  );\n}\n\nclass SignUpDialog extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSignUp = this.handleSignUp.bind(this);\n    this.state = {login: \'\'};\n  }\n\n  render() {\n    return (\n      <Dialog title="Mars Exploration Program"\n              message="How should we refer to you?">\n        <input value={this.state.login}               onChange={this.handleChange} />        <button onClick={this.handleSignUp}>          Sign Me Up!        </button>      </Dialog>\n    );\n  }\n\n  handleChange(e) {\n    this.setState({login: e.target.value});\n  }\n\n  handleSignUp() {\n    alert(`Welcome aboard, ${this.state.login}!`);\n  }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://codepen.io/gaearon/pen/gwZbYa?editors=0010",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[e._v("在 CodePen 上尝试")]),s("OutboundLink")],1)]),e._v(" "),s("h3",{attrs:{id:"那么继承呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#那么继承呢"}},[e._v("#")]),e._v(" 那么继承呢？")]),e._v(" "),s("p",[e._v("在 Facebook，我们在成百上千个组件中使用 React。我们并没有发现需要使用继承来构建组件层次的情况。")]),e._v(" "),s("p",[e._v("Props 和组合为你提供了清晰而安全地定制组件外观和行为的灵活方式。注意：组件可以接受任意 props，包括基本数据类型，React 元素以及函数。")]),e._v(" "),s("p",[e._v("如果你想要在组件间复用非 UI 的功能，我们建议将其提取为一个单独的 JavaScript 模块，如函数、对象或者类。组件可以直接引入（import）而无需通过 extend 继承它们。")]),e._v(" "),s("h2",{attrs:{id:"react哲学"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react哲学"}},[e._v("#")]),e._v(" React哲学")]),e._v(" "),s("ol",[s("li",[e._v("将设计好的UI划分成组件层级")]),e._v(" "),s("li",[e._v("用 React 创建一个静态版本")]),e._v(" "),s("li",[e._v("确定 UI state 的最小且完整表示")]),e._v(" "),s("li",[e._v("确定 state 放置的位置")]),e._v(" "),s("li",[e._v("添加反向数据流")]),e._v(" "),s("li",[e._v("that's it")])]),e._v(" "),s("p",[e._v("我们认为，React 是用 JavaScript 构建快速响应的大型 Web 应用程序的首选方式。它在 Facebook 和 Instagram 上表现优秀。")]),e._v(" "),s("p",[e._v("React 最棒的部分之一是引导我们思考如何构建一个应用。在这篇文档中，我们将会通过 React 构建一个可搜索的产品数据表格来更深刻地领会 React 哲学。")]),e._v(" "),s("h3",{attrs:{id:"从设计稿开始"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从设计稿开始"}},[e._v("#")]),e._v(" 从设计稿开始")]),e._v(" "),s("p",[e._v("假设我们已经有了一个返回 JSON 的 API，以及设计师提供的组件设计稿。如下所示：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://zh-hans.reactjs.org/static/1071fbcc9eed01fddc115b41e193ec11/d4770/thinking-in-react-mock.png",alt:"Mockup"}})]),e._v(" "),s("p",[e._v("该 JSON API 会返回以下数据：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('[\n  {category: "Sporting Goods", price: "$49.99", stocked: true, name: "Football"},\n  {category: "Sporting Goods", price: "$9.99", stocked: true, name: "Baseball"},\n  {category: "Sporting Goods", price: "$29.99", stocked: false, name: "Basketball"},\n  {category: "Electronics", price: "$99.99", stocked: true, name: "iPod Touch"},\n  {category: "Electronics", price: "$399.99", stocked: false, name: "iPhone 5"},\n  {category: "Electronics", price: "$199.99", stocked: true, name: "Nexus 7"}\n];\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("h3",{attrs:{id:"第一步-将设计好的-ui-划分为组件层级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一步-将设计好的-ui-划分为组件层级"}},[e._v("#")]),e._v(" 第一步：将设计好的 UI 划分为组件层级")]),e._v(" "),s("p",[e._v("首先，你需要在设计稿上用方框圈出每一个组件（包括它们的子组件），并且以合适的名称命名。如果你是和设计师一起完成此任务，那么他们可能已经做过类似的工作，所以请和他们进行交流！他们的 Photoshop 的图层名称可能最终就是你编写的 React 组件的名称！")]),e._v(" "),s("p",[e._v("但你如何确定应该将哪些部分划分到一个组件中呢？你可以将组件当作一种函数或者是对象来考虑，根据"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Single_responsibility_principle",target:"_blank",rel:"noopener noreferrer"}},[e._v("单一功能原则"),s("OutboundLink")],1),e._v("来判定组件的范围。也就是说，一个组件原则上只能负责一个功能。如果它需要负责更多的功能，这时候就应该考虑将它拆分成更小的组件。")]),e._v(" "),s("p",[e._v("在实践中，因为你经常是在向用户展示 JSON 数据模型，所以如果你的模型设计得恰当，UI（或者说组件结构）便会与数据模型一一对应，这是因为 UI 和数据模型都会倾向于遵守相同的"),s("em",[e._v("信息结构")]),e._v("。将 UI 分离为组件，其中每个组件需与数据模型的某部分匹配。")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://zh-hans.reactjs.org/static/9381f09e609723a8bb6e4ba1a7713b46/90cbd/thinking-in-react-components.png",alt:"组件嵌套图示"}})]),e._v(" "),s("p",[e._v("你会看到我们的应用中包含五个组件。我们已经将每个组件展示的数据标注为了斜体。图片中的序号与下方列表中的序号对应。")]),e._v(" "),s("ol",[s("li",[s("strong",[s("code",[e._v("FilterableProductTable")]),e._v(" (橙色):")]),e._v(" 是整个示例应用的整体")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("SearchBar")]),e._v(" (蓝色):")]),e._v(" 接受所有的"),s("em",[e._v("用户输入")])]),e._v(" "),s("li",[s("strong",[s("code",[e._v("ProductTable")]),e._v(" (绿色):")]),e._v(" 展示"),s("em",[e._v("数据内容")]),e._v("并根据"),s("em",[e._v("用户输入")]),e._v("筛选结果")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("ProductCategoryRow")]),e._v(" (天蓝色):")]),e._v(" 为每一个"),s("em",[e._v("产品类别")]),e._v("展示标题")]),e._v(" "),s("li",[s("strong",[s("code",[e._v("ProductRow")]),e._v(" (红色):")]),e._v(" 每一行展示一个"),s("em",[e._v("产品")])])]),e._v(" "),s("p",[e._v("你可能注意到，"),s("code",[e._v("ProductTable")]),e._v(" 的表头（包含 “Name” 和 “Price” 的那一部分）并未单独成为一个组件。这仅仅是一种偏好选择，如何处理这一问题也一直存在争论。就这个示例而言，因为表头只起到了渲染"),s("em",[e._v("数据集合")]),e._v("的作用——这与 "),s("code",[e._v("ProductTable")]),e._v(" 是一致的，所以我们仍然将其保留为 "),s("code",[e._v("ProductTable")]),e._v(" 的一部分。但是，如果表头过于复杂（例如，我们需为其添加排序功能），那么将它作为一个独立的 "),s("code",[e._v("ProductTableHeader")]),e._v(" 组件就显得很有必要了。")]),e._v(" "),s("p",[e._v("现在我们已经确定了设计稿中应该包含的组件，接下来我们将把它们描述为更加清晰的层级。设计稿中被其他组件包含的子组件，在层级上应该作为其子节点。")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("FilterableProductTable")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("SearchBar")])]),e._v(" "),s("li",[s("code",[e._v("ProductTable")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("ProductCategoryRow")])]),e._v(" "),s("li",[s("code",[e._v("ProductRow")])])])])])])]),e._v(" "),s("h3",{attrs:{id:"第二步-用-react-创建一个静态版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二步-用-react-创建一个静态版本"}},[e._v("#")]),e._v(" 第二步：用 React 创建一个静态版本")]),e._v(" "),s("p",[e._v("参阅 "),s("a",{attrs:{href:"https://codepen.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CodePen"),s("OutboundLink")],1),e._v(" 上的 "),s("a",{attrs:{href:"https://codepen.io/gaearon/pen/BwWzwm",target:"_blank",rel:"noopener noreferrer"}},[e._v("React 哲学：第二步"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("现在我们已经确定了组件层级，可以编写对应的应用了。最容易的方式，是先用已有的数据模型渲染一个不包含交互功能的 UI。最好将渲染 UI 和添加交互这两个过程分开。这是因为，编写一个应用的静态版本时，往往要编写大量代码，而不需要考虑太多交互细节；添加交互功能时则要考虑大量细节，而不需要编写太多代码。所以，将这两个过程分开进行更为合适。我们会在接下来的代码中体会到其中的区别。")]),e._v(" "),s("p",[e._v("在构建应用的静态版本时，我们需要创建一些会重用其他组件的组件，然后通过 "),s("em",[e._v("props")]),e._v(" 传入所需的数据。"),s("em",[e._v("props")]),e._v(" 是父组件向子组件传递数据的方式。即使你已经熟悉了 "),s("em",[e._v("state")]),e._v(" 的概念，也"),s("strong",[e._v("完全不应该使用 state")]),e._v(" 构建静态版本。state 代表了随时间会产生变化的数据，应当仅在实现交互时使用。所以构建应用的静态版本时，你不会用到它。")]),e._v(" "),s("p",[e._v("你可以自上而下或者自下而上构建应用：自上而下意味着首先编写层级较高的组件（比如 "),s("code",[e._v("FilterableProductTable")]),e._v("），自下而上意味着从最基本的组件开始编写（比如 "),s("code",[e._v("ProductRow")]),e._v("）。当你的应用比较简单时，使用自上而下的方式更方便；对于较为大型的项目来说，自下而上地构建，并同时为低层组件编写测试是更加简单的方式。")]),e._v(" "),s("p",[e._v("到此为止，你应该已经有了一个可重用的组件库来渲染你的数据模型。由于我们构建的是静态版本，所以这些组件目前只需提供 "),s("code",[e._v("render()")]),e._v(" 方法用于渲染。最顶层的组件 "),s("code",[e._v("FilterableProductTable")]),e._v(" 通过 props 接受你的数据模型。如果你的数据模型发生了改变，再次调用 "),s("code",[e._v("root.render()")]),e._v("，UI 就会相应地被更新。数据模型变化、调用 "),s("code",[e._v("render()")]),e._v(" 方法、UI 相应变化，这个过程并不复杂，因此很容易看清楚 UI 是如何被更新的，以及是在哪里被更新的。React "),s("strong",[e._v("单向数据流")]),e._v("（也叫"),s("em",[e._v("单向绑定")]),e._v("）的思想使得组件模块化，易于快速开发。")]),e._v(" "),s("p",[e._v("如果你在完成这一步骤时遇到了困难，可以参阅 "),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/getting-started.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("React 文档"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"补充说明-有关-props-和-state"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#补充说明-有关-props-和-state"}},[e._v("#")]),e._v(" 补充说明: 有关 props 和 state")]),e._v(" "),s("p",[e._v("在 React 中，有两类“模型”数据：props 和 state。清楚地理解两者的区别是十分重要的；如果你不太有把握，可以参阅 "),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/state-and-lifecycle.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("React 官方文档"),s("OutboundLink")],1),e._v("。你也可以查看 "),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/faq-state.html#what-is-the-difference-between-state-and-props",target:"_blank",rel:"noopener noreferrer"}},[e._v("FAQ: state 与 props 的区别是什么？"),s("OutboundLink")],1)]),e._v(" "),s("h3",{attrs:{id:"第三步-确定-ui-state-的最小-且完整-表示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三步-确定-ui-state-的最小-且完整-表示"}},[e._v("#")]),e._v(" 第三步：确定 UI state 的最小（且完整）表示")]),e._v(" "),s("p",[e._v("想要使你的 UI 具备交互功能，需要有触发基础数据模型改变的能力。React 通过实现 "),s("strong",[e._v("state")]),e._v(" 来完成这个任务。")]),e._v(" "),s("p",[e._v("为了正确地构建应用，你首先需要找出应用所需的 state 的最小表示，并根据需要计算出其他所有数据。其中的关键正是 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Don't_repeat_yourself",target:"_blank",rel:"noopener noreferrer"}},[e._v("DRY: "),s("em",[e._v("Don’t Repeat Yourself")]),s("OutboundLink")],1),e._v("。只保留应用所需的可变 state 的最小集合，其他数据均由它们计算产生。比如，你要编写一个任务清单应用，你只需要保存一个包含所有事项的数组，而无需额外保存一个单独的 state 变量（用于存储任务个数）。当你需要展示任务个数时，只需要利用该数组的 length 属性即可。")]),e._v(" "),s("p",[e._v("我们的示例应用拥有如下数据：")]),e._v(" "),s("ul",[s("li",[e._v("包含所有产品的原始列表")]),e._v(" "),s("li",[e._v("用户输入的搜索词")]),e._v(" "),s("li",[e._v("复选框是否选中的值")]),e._v(" "),s("li",[e._v("经过搜索筛选的产品列表")])]),e._v(" "),s("p",[e._v("通过问自己以下三个问题，你可以逐个检查相应数据是否属于 state：")]),e._v(" "),s("ol",[s("li",[e._v("该数据是否是由父组件通过 props 传递而来的？如果是，那它应该不是 state。")]),e._v(" "),s("li",[e._v("该数据是否随时间的推移而保持不变？如果是，那它应该也不是 state。")]),e._v(" "),s("li",[e._v("你能否根据其他 state 或 props 计算出该数据的值？如果是，那它也不是 state。")])]),e._v(" "),s("p",[e._v("包含所有产品的原始列表是经由 props 传入的，所以它不是 state；搜索词和复选框的值应该是 state，因为它们随时间会发生改变且无法由其他数据计算而来；经过搜索筛选的产品列表不是 state，因为它的结果可以由产品的原始列表根据搜索词和复选框的选择计算出来。")]),e._v(" "),s("p",[e._v("综上所述，属于 state 的有：")]),e._v(" "),s("ul",[s("li",[e._v("用户输入的搜索词")]),e._v(" "),s("li",[e._v("复选框是否选中的值")])]),e._v(" "),s("h3",{attrs:{id:"第四步-确定-state-放置的位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第四步-确定-state-放置的位置"}},[e._v("#")]),e._v(" 第四步：确定 state 放置的位置")]),e._v(" "),s("p",[e._v("参阅 "),s("a",{attrs:{href:"https://codepen.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CodePen"),s("OutboundLink")],1),e._v(" 上的 "),s("a",{attrs:{href:"https://codepen.io/gaearon/pen/qPrNQZ",target:"_blank",rel:"noopener noreferrer"}},[e._v("React 哲学：第四步"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("我们已经确定了应用所需的 state 的最小集合。接下来，我们需要确定哪个组件能够改变这些 state，或者说"),s("em",[e._v("拥有")]),e._v("这些 state。")]),e._v(" "),s("p",[e._v("注意：React 中的数据流是单向的，并顺着组件层级从上往下传递。哪个组件应该拥有某个 state 这件事，"),s("strong",[e._v("对初学者来说往往是最难理解的部分")]),e._v("。尽管这可能在一开始不是那么清晰，但你可以尝试通过以下步骤来判断：")]),e._v(" "),s("p",[e._v("对于应用中的每一个 state：")]),e._v(" "),s("ul",[s("li",[e._v("找到根据这个 state 进行渲染的所有组件。")]),e._v(" "),s("li",[e._v("找到他们的共同所有者（common owner）组件（在组件层级上高于所有需要该 state 的组件）。")]),e._v(" "),s("li",[e._v("该共同所有者组件或者比它层级更高的组件应该拥有该 state。")]),e._v(" "),s("li",[e._v("如果你找不到一个合适的位置来存放该 state，就可以直接创建一个新的组件来存放该 state，并将这一新组件置于高于共同所有者组件层级的位置。")])]),e._v(" "),s("p",[e._v("根据以上策略重新考虑我们的示例应用：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("ProductTable")]),e._v(" 需要根据 state 筛选产品列表。"),s("code",[e._v("SearchBar")]),e._v(" 需要展示搜索词和复选框的状态。")]),e._v(" "),s("li",[e._v("他们的共同所有者是 "),s("code",[e._v("FilterableProductTable")]),e._v("。")]),e._v(" "),s("li",[e._v("因此，搜索词和复选框的值应该很自然地存放在 "),s("code",[e._v("FilterableProductTable")]),e._v(" 组件中。")])]),e._v(" "),s("p",[e._v("很好，我们已经决定把这些 state 存放在 "),s("code",[e._v("FilterableProductTable")]),e._v(" 组件中。首先，将实例属性 "),s("code",[e._v("this.state = {filterText: '', inStockOnly: false}")]),e._v(" 添加到 "),s("code",[e._v("FilterableProductTable")]),e._v(" 的 "),s("code",[e._v("constructor")]),e._v(" 中，设置应用的初始 state；接着，将 "),s("code",[e._v("filterText")]),e._v(" 和 "),s("code",[e._v("inStockOnly")]),e._v(" 作为 props 传入 "),s("code",[e._v("ProductTable")]),e._v(" 和 "),s("code",[e._v("SearchBar")]),e._v("；最后，用这些 props 筛选 "),s("code",[e._v("ProductTable")]),e._v(" 中的产品信息，并设置 "),s("code",[e._v("SearchBar")]),e._v(" 的表单值。")]),e._v(" "),s("p",[e._v("你现在可以看到应用的变化了：将 "),s("code",[e._v("filterText")]),e._v(" 设置为 "),s("code",[e._v('"ball"')]),e._v(" 并刷新应用，你能发现表格中的数据已经更新了。")]),e._v(" "),s("h3",{attrs:{id:"第五步-添加反向数据流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第五步-添加反向数据流"}},[e._v("#")]),e._v(" 第五步：添加反向数据流")]),e._v(" "),s("p",[e._v("参阅 "),s("a",{attrs:{href:"https://codepen.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CodePen"),s("OutboundLink")],1),e._v(" 上的 "),s("a",{attrs:{href:"https://codepen.io/gaearon/pen/LzWZvb",target:"_blank",rel:"noopener noreferrer"}},[e._v("React 哲学：第五步"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("到目前为止，我们已经借助自上而下传递的 props 和 state 渲染了一个应用。现在，我们将尝试让数据反向传递：处于较低层级的表单组件更新较高层级的 "),s("code",[e._v("FilterableProductTable")]),e._v(" 中的 state。")]),e._v(" "),s("p",[e._v("React 通过一种比传统的双向绑定略微繁琐的方法来实现反向数据传递。尽管如此，但这种需要显式声明的方法更有助于人们理解程序的运作方式。")]),e._v(" "),s("p",[e._v("如果你尝试在上一个示例的搜索框中输入或勾选复选框（步骤 4），React 不会产生任何响应。这是正常的，因为我们之前已经将 "),s("code",[e._v("input")]),e._v(" 的值设置为了从 "),s("code",[e._v("FilterableProductTable")]),e._v(" 的 "),s("code",[e._v("state")]),e._v(" 传递而来的固定值。")]),e._v(" "),s("p",[e._v("让我们重新梳理一下需要实现的功能：每当用户改变表单的值，我们需要改变 state 来反映用户的当前输入。由于 state 只能由拥有它们的组件进行更改，"),s("code",[e._v("FilterableProductTable")]),e._v(" 必须将一个能够触发 state 改变的回调函数（callback）传递给 "),s("code",[e._v("SearchBar")]),e._v("。我们可以使用输入框的 "),s("code",[e._v("onChange")]),e._v(" 事件来监视用户输入的变化，并通知 "),s("code",[e._v("FilterableProductTable")]),e._v(" 传递给 "),s("code",[e._v("SearchBar")]),e._v(" 的回调函数。然后该回调函数将调用 "),s("code",[e._v("setState()")]),e._v("，从而更新应用。")]),e._v(" "),s("h3",{attrs:{id:"这就是全部了"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#这就是全部了"}},[e._v("#")]),e._v(" 这就是全部了")]),e._v(" "),s("p",[e._v("希望这篇文档能够帮助你建立起构建 React 组件和应用的一般概念。尽管你可能需要编写更多的代码，但是别忘了：比起写，代码更多地是给人看的。我们一起构建的这个模块化示例应用的代码就很易于阅读。当你开始构建更大的组件库时，你会意识到这种代码模块化和清晰度的重要性。并且随着代码重用程度的加深，你的代码行数也会显著地减少。😃")]),e._v(" "),s("h3",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])])])}),[],!1,null,null,null);s.default=t.exports}}]);