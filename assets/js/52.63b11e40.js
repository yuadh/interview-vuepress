(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{386:function(t,s,a){"use strict";a.r(s);var e=a(4),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"常用指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用指令"}},[t._v("#")]),t._v(" 常用指令")]),t._v(" "),s("p",[t._v("git clone 克隆\ngit init 初始化，会生隐藏文件\ngit add 添加到暂存区\ngit commit 推送代码告诉别人这个推送做了什么操作\ngit pull 更新本地代码\ngit push pull了之后就是通过该命令推送代码\ngit fetch  更新本地的代码，不同于pull不会进行合并\ngit checkout 切换分支\ngit branch  显示本地的所有分支\ngit status 查看状态")]),t._v(" "),s("h1",{attrs:{id:"git-rebase、git-merge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase、git-merge"}},[t._v("#")]),t._v(" git rebase、git merge")]),t._v(" "),s("p",[s("strong",[t._v("rebase 重定基地，重新设立起点")])]),t._v(" "),s("p",[t._v("都是将一个分支的更改并入另一个分支，只不过方式不同")]),t._v(" "),s("h2",{attrs:{id:"git-merge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-merge"}},[t._v("#")]),t._v(" git merge")]),t._v(" "),s("p",[t._v("将当前分支合并到指定分支")]),t._v(" "),s("p",[t._v("通过其合并分支会新增一个merge commit，再将两个分支历史联系起来")]),t._v(" "),s("p",[t._v("非破坏性的操作，对现有分支不会有更改，历史记录相对复杂")]),t._v(" "),s("h2",{attrs:{id:"gie-rebase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gie-rebase"}},[t._v("#")]),t._v(" gie rebase")]),t._v(" "),s("p",[t._v("将当前分支移植到指定分支或指定commit上")]),t._v(" "),s("p",[t._v("将整个分支移动到另一个分支上，有效整合所有分支的提交")]),t._v(" "),s("p",[t._v("历史记录清晰，消除了git merge所需的不必要的合并提交")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("git rebase "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\ngit rebase "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//解决冲突后，继续rebase")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h1",{attrs:{id:"git缓存代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git缓存代码"}},[t._v("#")]),t._v(" git缓存代码")]),t._v(" "),s("h1",{attrs:{id:"git-stash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-stash"}},[t._v("#")]),t._v(" git stash")]),t._v(" "),s("p",[t._v("保存当前工作进度，把暂存区和工作区的改动保存，修改存在栈上")]),t._v(" "),s("p",[t._v("当前文件修改了，需要提交commit保持工作区干净才能切分支")]),t._v(" "),s("blockquote",[s("p",[t._v("当想记录工作目录和索引的目前状态，但又想返回一个干净的工作目录时，用它。该命令将保存本地修改，并恢复工作目录以匹配头部提交")])]),t._v(" "),s("p",[t._v("恢复代码")]),t._v(" "),s("div",{staticClass:"language-JavaScript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("git stash apply\n\n# 保存当前未commit的代码\ngit stash\n\n# 保存当前未commit的代码并添加备注\ngit stash save "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"备注的内容"')]),t._v("\n\n# 列出stash的所有记录\ngit stash list\n\n# 删除stash的所有记录\ngit stash clear\n\n# 应用最近一次的stash\ngit stash apply\n\n# 应用最近一次的stash，随后删除该记录\ngit stash pop\n\n# 删除最近的一次stash\ngit stash drop\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])]),s("h1",{attrs:{id:"迁移仓库-同时保留原有提交记录和分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迁移仓库-同时保留原有提交记录和分支"}},[t._v("#")]),t._v(" 迁移仓库，同时保留原有提交记录和分支？")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("git clone 仓库地址\ncd 项目\ngit push "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("mirror 新的仓库地址\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h1",{attrs:{id:"git-reset、git-revert"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-reset、git-revert"}},[t._v("#")]),t._v(" git reset、git revert")]),t._v(" "),s("p",[t._v("都有 撤销、回退 的意思")]),t._v(" "),s("h2",{attrs:{id:"git-reset重置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-reset重置"}},[t._v("#")]),t._v(" git reset重置")]),t._v(" "),s("p",[t._v("git reset --hard")]),t._v(" "),s("p",[t._v("代码完全回退到本次提交时的状态，工作暂存区和本次提交后的**"),s("u",[s("em",[t._v("提交内容完全被清除，包括记录")])]),t._v("**")]),t._v(" "),s("p",[t._v("git push -f 强制提交")]),t._v(" "),s("p",[t._v("git status查看状态")]),t._v(" "),s("p",[t._v("reset是彻底的回退，该commit后的所有修改完全消失，包括提交记录")]),t._v(" "),s("ul",[s("li",[t._v("彻底回退 指定版本，干净清爽")]),t._v(" "),s("li",[t._v("提交时间线情绪，没有冗杂")]),t._v(" "),s("li",[t._v("记录彻底清除，无法再恢复")])]),t._v(" "),s("p",[t._v("reset --soft")]),t._v(" "),s("blockquote",[s("p",[t._v("完全不接触索引文件和工作树，使所有更改的文件更改为“要提交的更改”")])]),t._v(" "),s("p",[t._v("回退已提交的commit，将commit的修改内容放在暂存区")]),t._v(" "),s("blockquote",[s("p",[t._v("reset \\--hard")])]),t._v(" "),s("p",[t._v("让commit记录强制回溯到某一节点")]),t._v(" "),s("div",{staticClass:"language-JavaScript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("# 恢复最近一次 commit\ngit reset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("soft "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("以上针对未push的commit，对已push的commit，也可以使用该命令，但再次push时，因为远程分支和本地有差异，需要强制推送 git push \\-f 覆盖被reset的commit")]),t._v(" "),s("h2",{attrs:{id:"git-revert回退"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-revert回退"}},[t._v("#")]),t._v(" git revert回退")]),t._v(" "),s("p",[t._v("在当前提交后面，新增一次提交，抵消掉上一次提交导致的所有变化，"),s("strong",[s("u",[s("em",[t._v("不改变历史，用于安全取消过去发布的提交")])])])]),t._v(" "),s("p",[t._v("此次操作之前和之后的 "),s("code",[t._v("commit")]),t._v("和"),s("code",[t._v("history")]),t._v("都会保留，且把这次撤销作为最新的提交，如下：")]),t._v(" "),s("p",[t._v("撤销（revert）作为 撤销公开的提交（比如已经push）的安全方式，"),s("code",[t._v("git reset")]),t._v("重设本地更改")]),t._v(" "),s("p",[t._v("重设完全移除一堆更改，而撤销保留原来更改，用新的提交实现撤销")]),t._v(" "),s("h2",{attrs:{id:"区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[t._v("#")]),t._v(" 区别")]),t._v(" "),s("ul",[s("li",[t._v("git revert是新的commit回滚之前的commit，git reset直接删除指定commit")]),t._v(" "),s("li",[t._v("git reset 把HEAD向后移动，git revert是HEAD继续前进，只是新commit的内容和要revert的内容相反，抵消要被revert的内容")]),t._v(" "),s("li",[t._v("回滚这一操作上看，效果差不多，但在日后merge 以前的老版本时有区别")])]),t._v(" "),s("blockquote",[s("p",[t._v("git revert用一次逆向的commit“中和”之前的提交，日后合并老的branch时，之前提交合并的代码仍存在，导致不能重新合并")]),t._v(" "),s("p",[t._v("git reset把某些commit在某个branch上删除，和老branch再次merge时，被回滚的commit应该还会被引入")])]),t._v(" "),s("p",[t._v("如果回退分支的代码以后还要用——使用"),s("code",[t._v("git revert")])]),t._v(" "),s("p",[t._v("如果分支是提错了没用的，并且不想让别人发现这些错误——使用"),s("code",[t._v("git reset")])]),t._v(" "),s("h1",{attrs:{id:"git-pull、git-fetch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-pull、git-fetch"}},[t._v("#")]),t._v(" git pull、git fetch")]),t._v(" "),s("p",[t._v("git pull 从另一个存储库或本地分支获取并整合")]),t._v(" "),s("p",[t._v("git fetch 从另一个存储库下载对象和引用")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://interview.yuadh.com/assets/1649652294943.png",alt:"1649652294943"}})]),t._v(" "),s("p",[t._v("git pull=git fetch+git merge")]),t._v(" "),s("h1",{attrs:{id:"head、工作树、索引"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#head、工作树、索引"}},[t._v("#")]),t._v(" HEAD、工作树、索引？")]),t._v(" "),s("h2",{attrs:{id:"head"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#head"}},[t._v("#")]),t._v(" HEAD")]),t._v(" "),s("p",[t._v("git很多分支的本质是一个指向commit对象的可变指针，head是一个指向你正在工作中国的本地分支的指针。")]),t._v(" "),s("p",[t._v("通过git checkout test切换分支，head->test")]),t._v(" "),s("p",[t._v("HEAD指针——>分支指针——>最新提交")]),t._v(" "),s("h2",{attrs:{id:"工作树和索引"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工作树和索引"}},[t._v("#")]),t._v(" 工作树和索引")]),t._v(" "),s("p",[t._v("索引为了向数据库提交作准备的渔区——暂存区")]),t._v(" "),s("p",[t._v("工作树——查看和编辑文件的实际内容(本地工作区)")]),t._v(" "),s("h1",{attrs:{id:"fork-clone-branch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fork-clone-branch"}},[t._v("#")]),t._v(" fork，clone，branch")]),t._v(" "),s("h2",{attrs:{id:"fork-叉子-分叉"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fork-叉子-分叉"}},[t._v("#")]),t._v(" fork(叉子——>分叉)")]),t._v(" "),s("p",[t._v("克隆出一个仓库的新拷贝")]),t._v(" "),s("p",[t._v("若想要将修改合并，通过"),s("code",[t._v("pull request")]),t._v(" 将提交贡献给原仓库")]),t._v(" "),s("h2",{attrs:{id:"clone"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#clone"}},[t._v("#")]),t._v(" clone")]),t._v(" "),s("p",[t._v("下载本地，形成本地代码库")]),t._v(" "),s("p",[s("code",[t._v("git push")])]),t._v(" "),s("h2",{attrs:{id:"branch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#branch"}},[t._v("#")]),t._v(" branch")]),t._v(" "),s("p",[t._v("开启另一个分支")]),t._v(" "),s("p",[s("code",[t._v("git checkout")]),t._v("切换分支")]),t._v(" "),s("h1",{attrs:{id:"git-add-a、git-add"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-add-a、git-add"}},[t._v("#")]),t._v(" git add -A、git add .")]),t._v(" "),s("p",[t._v("git add -A  提交所有变化")]),t._v(" "),s("p",[t._v("git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)")]),t._v(" "),s("p",[t._v("git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件")]),t._v(" "),s("h1",{attrs:{id:"git-log"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-log"}},[t._v("#")]),t._v(" git log")]),t._v(" "),s("p",[t._v("查看提交日志")]),t._v(" "),s("h1",{attrs:{id:"git合并冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git合并冲突"}},[t._v("#")]),t._v(" git合并冲突")]),t._v(" "),s("p",[t._v("手动处理")]),t._v(" "),s("p",[t._v("可使用git diff查看文件不同")]),t._v(" "),s("p",[t._v("合并冲突后再git add ，git commit 最后 git push")]),t._v(" "),s("h1",{attrs:{id:"git-cherry-pick"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick"}},[t._v("#")]),t._v(" git cherry-pick")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://ruanyifeng.com/blog/2020/04/git-cherry-pick.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("阮一峰 git cherry-pick教程"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("将指定的提交（commit）应用于其他分支")]),t._v(" "),s("h1",{attrs:{id:"git分支开发错了怎么办"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git分支开发错了怎么办"}},[t._v("#")]),t._v(" git分支开发错了怎么办")]),t._v(" "),s("p",[t._v("第一步，暂存")]),t._v(" "),s("p",[t._v("git stash")]),t._v(" "),s("p",[t._v("第二步，切换分支")]),t._v(" "),s("p",[t._v("git checkout <分支名>")]),t._v(" "),s("p",[t._v("第三步，取出暂存代码")]),t._v(" "),s("p",[t._v("git stash pop")]),t._v(" "),s("h1",{attrs:{id:"git将多个commit合并为一个"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git将多个commit合并为一个"}},[t._v("#")]),t._v(" git将多个commit合并为一个")]),t._v(" "),s("p",[s("code",[t._v("git rebase -i commitId")]),t._v(" ，commitId 是想要合并的多个记录前的提交记录commitId")])])}),[],!1,null,null,null);s.default=r.exports}}]);