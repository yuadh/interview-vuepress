(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{367:function(s,n,e){"use strict";e.r(n);var a=e(4),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"hooks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hooks"}},[s._v("#")]),s._v(" Hooks")]),s._v(" "),n("p",[s._v("Hooks 是 "),n("code",[s._v("React v16.8")]),s._v(" 新增功能")]),s._v(" "),n("p",[s._v("作用：为函数组件提供状态、生命周期等原本 "),n("code",[s._v("class")]),s._v(" 组件中提供的 "),n("code",[s._v("React")]),s._v(" 功能， "),n("code",[s._v("Hooks")]),s._v(" 为函数组件钩入 "),n("code",[s._v("class")]),s._v(" 组件的特征")]),s._v(" "),n("p",[n("code",[s._v("R16.8")]),s._v(" 组件开发模式的对比")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("之前： "),n("code",[s._v("class")]),s._v("组件（提供状态） + 函数组件（展示内容）")])]),s._v(" "),n("li",[n("p",[s._v("之后：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("class")]),s._v("组件（提供状态） + 函数组件（展示内容）")]),s._v(" "),n("li",[n("code",[s._v("Hooks")]),s._v(" （提供状态） + 函数组件（展示内容）")])]),s._v(" "),n("p",[s._v("混用了以上两种方式")]),s._v(" "),n("p",[n("strong",[s._v("注意：")]),s._v(" 有了 "),n("code",[s._v("hooks")]),s._v(" ，不能再把函数组件成为无状态组件，"),n("code",[s._v("hooks")]),s._v(" 为函数提供了状态")])])]),s._v(" "),n("h2",{attrs:{id:"hooks优势"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hooks优势"}},[s._v("#")]),s._v(" hooks优势")]),s._v(" "),n("ul",[n("li",[s._v("组件的逻辑逻辑复用，HOCs、render-props重构组件结构，导致组件形成了 JSX 嵌套地狱的问题")]),s._v(" "),n("li",[s._v("class 组件自身的问题\n"),n("ul",[n("li",[s._v("class中的this指向问题")]),s._v(" "),n("li",[s._v("相互关联且需要对照修改的代码被拆分到不同生命周期函数中")]),s._v(" "),n("li",[s._v("不利于代码压缩和优化，也不利于 TS 的类型推导")])])])]),s._v(" "),n("ol",[n("li",[s._v("Hooks 只能在函数组件中使用，避免了 class 组件的问题")]),s._v(" "),n("li",[s._v("复用组件状态逻辑，而无需更改组件层次结构")]),s._v(" "),n("li",[s._v("根据功能而不是基于生命周期方法强制进行代码分割")]),s._v(" "),n("li",[s._v("抛开 "),n("code",[s._v("React")]),s._v(" 赋予的概念来说，"),n("code",[s._v("Hooks")]),s._v(" 就是一些普通的函数")]),s._v(" "),n("li",[s._v("具有更好的 TS 类型推导，tree-shaking 友好")])]),s._v(" "),n("h2",{attrs:{id:"hooks基本使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hooks基本使用"}},[s._v("#")]),s._v(" hooks基本使用")]),s._v(" "),n("h3",{attrs:{id:"usestate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#usestate"}},[s._v("#")]),s._v(" useState ()")]),s._v(" "),n("ul",[n("li",[s._v("使用场景：当你想要在函数组件中，使用组件状态时，就要使用 "),n("code",[s._v("useState")]),s._v(" Hooks")]),s._v(" "),n("li",[s._v("作用：为函数组件提供状态")])]),s._v(" "),n("p",[s._v("使用示例")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import {useState} from 'react'\nconst Count = ()=>{\n    const stateArray = useState(0)\n    const [state,setState] = stateArray[0]\n    return (\n     <div>\n        state\n     \t<button onClick={()=>setState(state+1)}>click</button>   \n     </div>\n    )\n}\n\nJS\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[n("strong",[s._v("状态的读取和修改")])]),s._v(" "),n("p",[n("strong",[s._v("读取状态")]),s._v("：该方法提供的状态，是函数内部的局部变量，可以在函数内的任意位置使用")]),s._v(" "),n("p",[n("strong",[s._v("修改状态")]),s._v("： "),n("code",[s._v("setCount")]),s._v(" 是一个函数，参数表示：新的状态值")]),s._v(" "),n("p",[n("strong",[s._v("组件更新的过程")])]),s._v(" "),n("p",[s._v("函数组件使用 "),n("code",[s._v("useState")]),s._v(" 后的执行过程，以及状态值的变化")]),s._v(" "),n("p",[n("strong",[s._v("组件第一次渲染")])]),s._v(" "),n("ol",[n("li",[s._v("从头开始是执行该组件的代码逻辑")]),s._v(" "),n("li",[s._v("调用 "),n("code",[s._v("useState(0)")]),s._v(" 将传入的参数作为状态初始值")]),s._v(" "),n("li",[s._v("渲染组件时，此时，获取到的状态值为")])]),s._v(" "),n("p",[n("strong",[s._v("选进第二次渲染")])]),s._v(" "),n("ol",[n("li",[s._v("点击按钮，调用 "),n("code",[s._v("setCount(count+1)")]),s._v(" 修改状态，因为状态发生改变，所以，该组件会重新渲染")]),s._v(" "),n("li",[s._v("组件重新渲染时，会再次执行该组件中的代码逻辑")]),s._v(" "),n("li",[s._v("再次调用 "),n("code",[s._v("useState(0)")]),s._v(" , 此时 "),n("code",[s._v("React")]),s._v(" 内部会拿到最新值而非初始值")]),s._v(" "),n("li",[s._v("再次渲染组件，此时获取到的组件的状态值为最新值")])]),s._v(" "),n("h3",{attrs:{id:"使用规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用规则"}},[s._v("#")]),s._v(" 使用规则")]),s._v(" "),n("p",[s._v("注意："),n("code",[s._v("React Hooks")]),s._v(" 只能直接出现在 函数组件 中，不能嵌套在 "),n("code",[s._v("if/for")]),s._v(" 其它 函数中")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("React Hooks` 必须每次组件渲染时，按照相同的顺序来调用所有的 `Hooks\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("为什么会有这样的规则？因为 "),n("code",[s._v("React")]),s._v(" 是按照 "),n("code",[s._v("Hooks")]),s._v(" 的调用顺序来识别每一个 "),n("code",[s._v("Hook")]),s._v(" ，如果每次调用的顺序不一样，导致 "),n("code",[s._v("React")]),s._v(" 无法知道哪一个是 "),n("code",[s._v("Hook")])])]),s._v(" "),n("h3",{attrs:{id:"useeffect"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#useeffect"}},[s._v("#")]),s._v(" useEffect ()")]),s._v(" "),n("p",[n("strong",[s._v("作用：处理函数组件中的副作用")])]),s._v(" "),n("p",[s._v("对 "),n("code",[s._v("React")]),s._v(" 组件来说，著作用就是根据数据流渲染 UI ，除此之外的都是副作用 . 如：数据请求 、动手修改 DOM 、localSorage 操作等")]),s._v(" "),n("p",[n("strong",[s._v("基本使用")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import {useEffect} from 'react'\nuseEffect(()=>{\n  document.litle = `当前点击次数 ${count} 次`\n}, , )\n\nJS\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("参数1：回调函数，就是在该函数中写会产生副作用的代码")]),s._v(" "),n("p",[s._v("执行实际：该 "),n("code",[s._v("effect")]),s._v(" 会在组件渲染后以及组件更新后执行")]),s._v(" "),n("p",[s._v("相当于 ： "),n("code",[s._v("componentDidMount")]),s._v(" + "),n("code",[s._v("componentDidUpdate")])]),s._v(" "),n("p",[n("strong",[s._v("依赖项")])]),s._v(" "),n("p",[s._v("描述：如果组件中有另一个状态，另一个状态状态更新，函数中的回调函数也会执行")]),s._v(" "),n("p",[s._v("性能优化：跳过不必要的执行，只在 "),n("code",[s._v("count")]),s._v(" 变化时，才执行相应的 "),n("code",[s._v("effect")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("useEffect(()=>{\n  document.litle = `当前点击次数 ${count} 次`\n},[count])\n\nJS\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("参数2 ： 可选的，可以传入一个数组，数组中的元素为副作用函数的依赖性 . 表示只有在依赖性改变时，才会重新执行 "),n("code",[s._v("effect")])]),s._v(" "),n("p",[s._v("空数组：该 "),n("code",[s._v("effect")]),s._v(" 只会在组件第一次渲染后执行 ，相当于"),n("code",[s._v("componentDidMount")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 触发时机：1 第一次渲染会执行 2 每次组件重新渲染都会再次执行\n// componentDidMount + ComponentDidUpdate\nuseEffect(() => {})\n\n// componentDidMount\n// 触发时机：只在组件第一次渲染时执行\nuseEffect(() => {}, [])\n\n// componentDidMount + componentDidUpdate(判断)\n// 触发时机：1 第一次渲染会执行 2 当 count 变化时会再次执行\nuseEffect(() => {}, [count])\n\nJS\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[n("strong",[s._v("注意：")]),s._v(" 不要对 "),n("code",[s._v("useEffect")]),s._v(" 的依赖项撒谎")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const App = () => {\n  const [count, setCount] = useState(0)\n  useEffect(() => {\n    document.title = '点击了' + count + '次'\n  }, [])\n  return (\n    <div>\n      <h1>计数器：{count}</h1>\n      <button onClick={() => setCount(count + 1)}>+1</button>\n      <hr />\n    </div>\n  )\n}\n\nJS\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("会在点击时没有效果产生")]),s._v(" "),n("blockquote",[n("p",[s._v("useEffect完全指南：https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/")])]),s._v(" "),n("h3",{attrs:{id:"清理副作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#清理副作用"}},[s._v("#")]),s._v(" 清理副作用")]),s._v(" "),n("p",[s._v("在我们只想在 "),n("code",[s._v("React")]),s._v(" 更新 DOM 之后运行一些额外的代码 ，比如 订阅外部数据源，开启定时器看，注册时间。。这种情况下，清除工作是非常重要的，可以防止内存泄露")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("useEffect(() => {\n  const handleResize = () => {}\n  window.addEventListener('resize', handleResize)\n  return () => window.removeEventListener('resize', handleResize)\n}, [])\n\nJS\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[n("code",[s._v("effect")]),s._v(" 回调函数的返回值，可选的，返回的是一个清理函数，用来执行事件解绑清理等操作")]),s._v(" "),n("p",[n("strong",[s._v("执行时机")])]),s._v(" "),n("ul",[n("li",[s._v("组件卸载之前")]),s._v(" "),n("li",[s._v("重新执行 "),n("code",[s._v("effect")]),s._v(" 回调函数之前")])]),s._v(" "),n("p",[s._v("相当于 "),n("code",[s._v("componentDidMount")]),s._v("+ "),n("code",[s._v("componentWillUnmount")])]),s._v(" "),n("p",[s._v("推荐：一个 "),n("code",[s._v("useEffect")]),s._v(" 只处理一个功能，有多个功能时，使用多次 "),n("code",[s._v("useEffect")])]),s._v(" "),n("p",[s._v("优势：根据业务逻辑来拆分，相同功能的业务逻辑放在一起，而不是根据生命周期方法来拆分代码")]),s._v(" "),n("h3",{attrs:{id:"发送网络请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#发送网络请求"}},[s._v("#")]),s._v(" 发送网络请求")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("useEffect(() => {\n  // 是否取消本次请求\n  let didCancel = false\n\n  async function fetchMyAPI() {\n    let url = 'http://something/' + productId\n    let config = {}\n    const response = await myFetch(url)\n    // 如果开启其他请求，就忽略本次（过时）的请求结果\n    if (!didCancel) {\n      console.log(response)\n    }\n  }\n\n  fetchMyAPI()\n  return () => { didCancel = true } // 取消本次请求\n}, [productId])\n\nJS\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("ul",[n("li",[n("code",[s._v("effect")]),s._v(" 只能是一个同步函数，不能使用 "),n("code",[s._v("async")])]),s._v(" "),n("li",[s._v("因为 "),n("code",[s._v("effect")]),s._v(" 的返回值应该是一个清理函数，"),n("code",[s._v("react")]),s._v(" 会在组件卸载或者 "),n("code",[s._v("effect")]),s._v(" 的依赖项变化时重新执行，但是如果 "),n("code",[s._v("effect")]),s._v(" 是 "),n("code",[s._v("async")]),s._v(" 的，此时返回值对象是 "),n("code",[s._v("promise")]),s._v(" ，无法保证清理函数被立即调用")]),s._v(" "),n("li",[s._v("为了使用 "),n("code",[s._v("async/await")]),s._v(" 语法，可以在 "),n("code",[s._v("effect")]),s._v(" 内部创建 "),n("code",[s._v("async")]),s._v(" 函数并调用")])]),s._v(" "),n("p",[n("strong",[s._v("注意")])]),s._v(" "),n("p",[s._v("如果网络请求函数内访访问数据，可能会导致网络请求函数无线循环调用的问题，因为 "),n("code",[s._v("effect")]),s._v(" 的执行是在数据发生更新时候去执行的")]),s._v(" "),n("h2",{attrs:{id:"useref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#useref"}},[s._v("#")]),s._v(" useRef ()")]),s._v(" "),n("p",[s._v("使用场景：在 "),n("code",[s._v("React")]),s._v(" 中进行 DOM 操作时，用来获取 DOM")]),s._v(" "),n("p",[s._v("作用：返回一个带有 "),n("code",[s._v("current")]),s._v(" 属性的可变对象，通过该对象进行 DOM 操作了")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const inputRef = useRef(null)\n\nJS\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("使用")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const App = () => {\n  const inputRef = useRef(null)\n  const add = () => {\n    console.log(inputRef.current.value)\n  }\n  return (\n    <section className="todoapp">\n      <input type="text" placeholder="请输入内容" ref={inputRef} />{\' \'}\n      <button onClick={add}>添加</button>\n    </section>\n  )\n}\n\nJS\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("注意："),n("code",[s._v("useRef")]),s._v(" 不仅仅可以用于操作 DOM ， 还可以操作组件")]),s._v(" "),n("h2",{attrs:{id:"usecontext"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#usecontext"}},[s._v("#")]),s._v(" useContext ()")]),s._v(" "),n("p",[s._v("使用场景：跨组件共享通信")]),s._v(" "),n("p",[n("code",[s._v("Context")]),s._v(" 作用：实现跨组件传递数据，而不必在每个级别手动传递 "),n("code",[s._v("props")]),s._v("，简化组件之间的数据传递过程")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const Context = createContext(defaultValue)\nconst value = useContext(conText)\n\nJS\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("code",[s._v("Context")]),s._v(" 对象包含了两个组件")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("<Context.Provider value>")]),s._v(" 通过 "),n("code",[s._v("value")]),s._v(" 属性提供数据")]),s._v(" "),n("li",[n("code",[s._v("<Context.Consumer>")]),s._v(" 通过 "),n("code",[s._v("render-props")]),s._v(" 模式，在 "),n("code",[s._v("JSX")]),s._v(" 中获取"),n("code",[s._v("Context")]),s._v(" 提供的数据")])]),s._v(" "),n("p",[s._v("在函数组件中，获取 "),n("code",[s._v("Context")]),s._v(" 中的值，需需要配合 "),n("code",[s._v("Context")]),s._v(" 一起使用而 "),n("code",[s._v("useContext")]),s._v(" 和 "),n("code",[s._v("Context.Consumer")]),s._v(" 的区别在于：获取数据的位置不同")]),s._v(" "),n("p",[s._v("示例")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import React, { useState, useContext } from 'react'\nconst Context = React.createContext()\nconst App = () => {\n  const [color, setColor] = useState('red')\n  return (\n    <Context.Provider value={color}>\n      <div>\n        <h1>我是根组件</h1>\n        <div>颜色：{color}</div>\n        <button onClick={() => setColor('yellow')}>修改</button>\n        <Father></Father>\n      </div>\n    </Context.Provider>\n  )\n}\n\nconst Father = () => {\n  return (\n    <div>\n      <h3>我是父组件</h3>\n      <Child></Child>\n    </div>\n  )\n}\n\nconst Child = () => {\n  const color = useContext(Context)\n  return (\n    <div>\n      <h5>我是子组件--{color}</h5>\n    </div>\n  )\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br")])]),n("h2",{attrs:{id:"react-memo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-memo"}},[s._v("#")]),s._v(" React-memo ()")]),s._v(" "),n("p",[s._v("使用场景：在父组件的状态更新的时候，子组件就会无条件的一起更新")]),s._v(" "),n("p",[s._v("渲染过程")]),s._v(" "),n("ul",[n("li",[s._v("子组件 "),n("code",[s._v("props")]),s._v(" 变化时更新过程：组件代码执行 -> JSX Diff(配合虚拟 DOM) -> 渲染(变化后的内容)")]),s._v(" "),n("li",[s._v("子组件无变化更新过程：代码组件执行 -> JSX Diff (配合虚拟DOM)")])]),s._v(" "),n("p",[s._v("为了提升性能，优化不必要的无变化子组件更新，这种情况就可以使用 "),n("code",[s._v("React.memo")]),s._v(" 高阶组件")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Child2 = ({ count }) => {\n  console.log('Child2 子组件代码执行了')\n  return <div style={{ backgroundColor: '#abc' }}>子组件2：{count}</div>\n}\n\nconst Child1 = () => {\n  console.log('Child1 子组件代码执行了')\n  return <div style={{ backgroundColor: '#def' }}>子组件1</div>\n}\n\nconst App = () => {\n  const [count, setCount] = useState(0)\n\n  return (\n    <div style={{ backgroundColor: 'pink', padding: 10 }}>\n      <h1>计数器：{count}</h1>\n      <button onClick={() => setCount(count + 1)}>+1</button>\n      <hr />\n\n      {/* 子组件 */}\n      <Child1 />\n      <br />\n      <Child2 count={count} />\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nJS\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br")])]),n("p",[s._v("此示例，在子组件2更新时， 子组件1也会执行更新")]),s._v(" "),n("p",[n("code",[s._v("memo")]),s._v(" 作用：记忆上一次的更新渲染结果，在 "),n("code",[s._v("props")]),s._v(" 没有变化时复用该结果，避免函数不必要的更新")]),s._v(" "),n("p",[n("strong",[s._v("使用示例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import { useState, memo } from 'react' //导入\nconst Child2 = memo(({ count }) => {\n  console.log('Child2 子组件代码执行了')\n  return <div style={{ backgroundColor: '#abc' }}>子组件2：{count}</div>\n})\n\nconst Child1 = memo(() => {\n  console.log('Child1 子组件代码执行了')\n  return <div style={{ backgroundColor: '#def' }}>子组件1</div>\n})\n\nJS\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("ul",[n("li",[s._v("参数：需要被记忆的组件，不必要更新的组件")]),s._v(" "),n("li",[s._v("返回值： "),n("code",[s._v("React")]),s._v(" 记住的 "),n("code",[s._v("Child")]),s._v(" 组件")])]),s._v(" "),n("p",[s._v("原理：通过检查对比更新前后 "),n("code",[s._v("props")]),s._v(" 是否相同，来决定是否复用上一次的渲染结果")]),s._v(" "),n("p",[n("strong",[s._v("注意")]),s._v("： 不是所有的组件都适用 "),n("code",[s._v("memo")]),s._v("，需要经常更新渲染的组件使用 "),n("code",[s._v("memo")]),s._v(" 性能反而会降低")]),s._v(" "),n("h3",{attrs:{id:"浅层对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浅层对比"}},[s._v("#")]),s._v(" 浅层对比")]),s._v(" "),n("p",[s._v("默认情况下，"),n("code",[s._v("React.memo")]),s._v(" 只会对更新前后的 "),n("code",[s._v("props")]),s._v(" 进行浅对比")]),s._v(" "),n("p",[s._v("也就是说，对于对象类型的 "),n("code",[s._v("prop")]),s._v(" 来说，只会比较引用(地址)")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import { useState, memo } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Child2 = memo(({ count }) => {\n  console.log('Child2 子组件代码执行了')\n  return <div style={{ backgroundColor: '#abc' }}>子组件2：{count}</div>\n})\n\nconst Child1 = memo(({ obj }) => {\n  console.log('Child1 子组件代码执行了')\n  return (\n    <div style={{ backgroundColor: '#def' }}>\n      子组件1 id:{obj.id} name:{obj.name} age:{obj.age}\n    </div>\n  )\n})\n\nconst App = () => {\n  const [count, setCount] = useState(0)\n  const obj = {\n    name: 'yd',\n    id: 11,\n    age: 22,\n  }\n  return (\n    <div style={{ backgroundColor: 'pink', padding: 10 }}>\n      <h1>计数器：{count}</h1>\n      <button onClick={() => setCount(count + 1)}>+1</button>\n      <hr />\n      {/* 子组件 */}\n      <Child1 obj={obj} />\n      <br />\n      <Child2 count={count} />\n    </div>\n  )\n}\n\nJS\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br")])]),n("p",[s._v("此处传入的参数为 "),n("code",[s._v("引用数据类型")]),s._v(" ，所以在会浅层的对比地址是否发生变化所以在每次更新组件时，创建的 obj 的地址是不同的所以在更新 DOM 也会更新此组件")]),s._v(" "),n("p",[s._v("可以使用 "),n("code",[s._v("React.memo")]),s._v(" 的第二个参数手动控制比较")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("React.memo(Child,function areEqual(prevProps,nextProps){\n  return preProps === nextProps\n})\n\nJS\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("如果返回为 "),n("code",[s._v("true")]),s._v(" 表示记住不渲染组件，如果返回 "),n("code",[s._v("false")]),s._v(" 表示渲染该组件")]),s._v(" "),n("p",[s._v("更好的解决方法")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("useCallback")]),s._v(" Hook：记住函数的引用，在组件每次更新时返回相同引用的函数。")]),s._v(" "),n("li",[n("code",[s._v("useMemo")]),s._v(" Hook：记住任意数据（数值、对象、函数等），在组件每次更新时返回相同引用的数据【功能之一】")])])])}),[],!1,null,null,null);n.default=t.exports}}]);