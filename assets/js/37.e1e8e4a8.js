(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{371:function(e,t,r){"use strict";r.r(t);var o=r(4),a=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"hook简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hook简介"}},[e._v("#")]),e._v(" Hook简介")]),e._v(" "),t("p",[t("em",[e._v("Hook")]),e._v(" 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import React, { useState } from 'react';\n\nfunction Example() {\n  // 声明一个新的叫做 “count” 的 state 变量  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br")])]),t("p",[t("code",[e._v("useState")]),e._v(" 是我们要学习的第一个 “Hook”，这个例子是简单演示。如果不理解也不用担心。")]),e._v(" "),t("p",[t("strong",[e._v("你将在"),t("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/hooks-overview.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("下一章节"),t("OutboundLink")],1),e._v("正式开始学习 Hook。")]),e._v(" 这一章节，我们将会解释为什么会在 React 中加入 Hook，以及如何使用 Hook 写出更好的应用。")]),e._v(" "),t("blockquote",[t("p",[e._v("注意")]),e._v(" "),t("p",[e._v("React 16.8.0 是第一个支持 Hook 的版本。升级时，请注意更新所有的 package，包括 React DOM。 React Native 从 "),t("a",{attrs:{href:"https://reactnative.dev/blog/2019/03/12/releasing-react-native-059",target:"_blank",rel:"noopener noreferrer"}},[e._v("0.59 版本"),t("OutboundLink")],1),e._v("开始支持 Hook。")])]),e._v(" "),t("h3",{attrs:{id:"视频介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#视频介绍"}},[e._v("#")]),e._v(" 视频介绍")]),e._v(" "),t("p",[e._v("在 React Conf 2018 上，Sophie Alpert 和 Dan Abramov 介绍了 Hook，紧接着 Ryan Florence 演示了如何使用 Hook 重构应用。你可以在这里看到这个视频：")]),e._v(" "),t("iframe",{staticStyle:{margin:"0px",padding:"0px","box-sizing":"inherit",position:"absolute",top:"0px",left:"0px",width:"840px",height:"472.975px"},attrs:{src:"https://www.youtube.com/embed/dpw9EHDh2bM",frameborder:"0",allowfullscreen:""}}),e._v(" "),t("h3",{attrs:{id:"没有破坏性改动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#没有破坏性改动"}},[e._v("#")]),e._v(" 没有破坏性改动")]),e._v(" "),t("p",[e._v("在我们继续之前，请记住 Hook 是：")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("完全可选的。")]),e._v(" 你无需重写任何已有代码就可以在一些组件中尝试 Hook。但是如果你不想，你不必现在就去学习或使用 Hook。")]),e._v(" "),t("li",[t("strong",[e._v("100% 向后兼容的。")]),e._v(" Hook 不包含任何破坏性改动。")]),e._v(" "),t("li",[t("strong",[e._v("现在可用。")]),e._v(" Hook 已发布于 v16.8.0。")])]),e._v(" "),t("p",[t("strong",[e._v("没有计划从 React 中移除 class。")]),e._v(" 你可以在本页"),t("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/hooks-intro.html#gradual-adoption-strategy",target:"_blank",rel:"noopener noreferrer"}},[e._v("底部的章节"),t("OutboundLink")],1),e._v("读到更多关于 Hook 的渐进策略。")]),e._v(" "),t("p",[t("strong",[e._v("Hook 不会影响你对 React 概念的理解。")]),e._v(" 恰恰相反，Hook 为已知的 React 概念提供了更直接的 API：props， state，context，refs 以及生命周期。稍后我们将看到，Hook 还提供了一种更强大的方式来组合他们。")]),e._v(" "),t("p",[t("strong",[e._v("如果不想了解添加 Hook 的具体原因，可以直接"),t("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/hooks-overview.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("跳到下一章节开始学习 Hook！"),t("OutboundLink")],1)]),e._v(" 当然你也可以继续阅读这一章节来了解原因，并且可以学习到如何在不重写应用的情况下使用 Hook。")]),e._v(" "),t("h3",{attrs:{id:"动机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动机"}},[e._v("#")]),e._v(" 动机")]),e._v(" "),t("p",[e._v("Hook 解决了我们五年来编写和维护成千上万的组件时遇到的各种各样看起来不相关的问题。无论你正在学习 React，或每天使用，或者更愿尝试另一个和 React 有相似组件模型的框架，你都可能对这些问题似曾相识。")]),e._v(" "),t("h3",{attrs:{id:"在组件之间复用状态逻辑很难"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在组件之间复用状态逻辑很难"}},[e._v("#")]),e._v(" 在组件之间复用状态逻辑很难")]),e._v(" "),t("p",[e._v("React 没有提供将可复用性行为“附加”到组件的途径（例如，把组件连接到 store）。如果你使用过 React 一段时间，你也许会熟悉一些解决此类问题的方案，比如 "),t("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/render-props.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("render props"),t("OutboundLink")],1),e._v(" 和 "),t("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/higher-order-components.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("高阶组件"),t("OutboundLink")],1),e._v("。但是这类方案需要重新组织你的组件结构，这可能会很麻烦，使你的代码难以理解。如果你在 React DevTools 中观察过 React 应用，你会发现由 providers，consumers，高阶组件，render props 等其他抽象层组成的组件会形成“嵌套地狱”。尽管我们可以"),t("a",{attrs:{href:"https://github.com/facebook/react-devtools/pull/503",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 DevTools 过滤掉它们"),t("OutboundLink")],1),e._v("，但这说明了一个更深层次的问题：React 需要为共享状态逻辑提供更好的原生途径。")]),e._v(" "),t("p",[e._v("你可以使用 Hook 从组件中提取状态逻辑，使得这些逻辑可以单独测试并复用。"),t("strong",[e._v("Hook 使你在无需修改组件结构的情况下复用状态逻辑。")]),e._v(" 这使得在组件间或社区内共享 Hook 变得更便捷。")]),e._v(" "),t("p",[e._v("具体将在"),t("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/hooks-custom.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("自定义 Hook"),t("OutboundLink")],1),e._v(" 中对此展开更多讨论。")]),e._v(" "),t("h3",{attrs:{id:"复杂组件变得难以理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#复杂组件变得难以理解"}},[e._v("#")]),e._v(" 复杂组件变得难以理解")]),e._v(" "),t("p",[e._v("我们经常维护一些组件，组件起初很简单，但是逐渐会被状态逻辑和副作用充斥。每个生命周期常常包含一些不相关的逻辑。例如，组件常常在 "),t("code",[e._v("componentDidMount")]),e._v(" 和 "),t("code",[e._v("componentDidUpdate")]),e._v(" 中获取数据。但是，同一个 "),t("code",[e._v("componentDidMount")]),e._v(" 中可能也包含很多其它的逻辑，如设置事件监听，而之后需在 "),t("code",[e._v("componentWillUnmount")]),e._v(" 中清除。相互关联且需要对照修改的代码被进行了拆分，而完全不相关的代码却在同一个方法中组合在一起。如此很容易产生 bug，并且导致逻辑不一致。")]),e._v(" "),t("p",[e._v("在多数情况下，不可能将组件拆分为更小的粒度，因为状态逻辑无处不在。这也给测试带来了一定挑战。同时，这也是很多人将 React 与状态管理库结合使用的原因之一。但是，这往往会引入了很多抽象概念，需要你在不同的文件之间来回切换，使得复用变得更加困难。")]),e._v(" "),t("p",[e._v("为了解决这个问题，"),t("strong",[e._v("Hook 将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）")]),e._v("，而并非强制按照生命周期划分。你还可以使用 reducer 来管理组件的内部状态，使其更加可预测。")]),e._v(" "),t("p",[e._v("我们将在"),t("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/hooks-effect.html#tip-use-multiple-effects-to-separate-concerns",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用 Effect Hook"),t("OutboundLink")],1),e._v(" 中对此展开更多讨论。")]),e._v(" "),t("h3",{attrs:{id:"难以理解的-class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#难以理解的-class"}},[e._v("#")]),e._v(" 难以理解的 class")]),e._v(" "),t("p",[e._v("除了代码复用和代码管理会遇到困难外，我们还发现 class 是学习 React 的一大屏障。你必须去理解 JavaScript 中 "),t("code",[e._v("this")]),e._v(" 的工作方式，这与其他语言存在巨大差异。还不能忘记绑定事件处理器。如果不使用 "),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields#public_instance_fields",target:"_blank",rel:"noopener noreferrer"}},[e._v("ES2022 public class fields"),t("OutboundLink")],1),e._v("，这些代码非常冗余。大家可以很好地理解 props，state 和自顶向下的数据流，但对 class 却一筹莫展。即便在有经验的 React 开发者之间，对于函数组件与 class 组件的差异也存在分歧，甚至还要区分两种组件的使用场景。")]),e._v(" "),t("p",[e._v("另外，React 已经发布五年了，我们希望它能在下一个五年也与时俱进。就像 "),t("a",{attrs:{href:"https://svelte.dev/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Svelte"),t("OutboundLink")],1),e._v("，"),t("a",{attrs:{href:"https://angular.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Angular"),t("OutboundLink")],1),e._v("，"),t("a",{attrs:{href:"https://glimmerjs.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Glimmer"),t("OutboundLink")],1),e._v("等其它的库展示的那样，组件"),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Ahead-of-time_compilation",target:"_blank",rel:"noopener noreferrer"}},[e._v("预编译"),t("OutboundLink")],1),e._v("会带来巨大的潜力。尤其是在它不局限于模板的时候。最近，我们一直在使用 "),t("a",{attrs:{href:"https://prepack.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Prepack"),t("OutboundLink")],1),e._v(" 来试验 "),t("a",{attrs:{href:"https://github.com/facebook/react/issues/7323",target:"_blank",rel:"noopener noreferrer"}},[e._v("component folding"),t("OutboundLink")],1),e._v("，也取得了初步成效。但是我们发现使用 class 组件会无意中鼓励开发者使用一些让优化措施无效的方案。class 也给目前的工具带来了一些问题。例如，class 不能很好的压缩，并且会使热重载出现不稳定的情况。因此，我们想提供一个使代码更易于优化的 API。")]),e._v(" "),t("p",[e._v("为了解决这些问题，"),t("strong",[e._v("Hook 使你在非 class 的情况下可以使用更多的 React 特性。")]),e._v(" 从概念上讲，React 组件一直更像是函数。而 Hook 则拥抱了函数，同时也没有牺牲 React 的精神原则。Hook 提供了问题的解决方案，无需学习复杂的函数式或响应式编程技术。")]),e._v(" "),t("blockquote",[t("p",[e._v("示例")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/hooks-overview.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Hook 概览"),t("OutboundLink")],1),e._v("是开始学习 Hook 的不错选择。")])]),e._v(" "),t("h3",{attrs:{id:"渐进策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渐进策略"}},[e._v("#")]),e._v(" 渐进策略")]),e._v(" "),t("blockquote",[t("p",[t("strong",[e._v("总结：没有计划从 React 中移除 class。")])])]),e._v(" "),t("p",[e._v("大部分 React 开发者会专注于开发产品，而没时间关注每一个新 API 的发布。Hook 还很新，也许等到有更多示例和教程后，再考虑学习或使用它们也不迟。")]),e._v(" "),t("p",[e._v("我们也明白向 React 添加新的原生概念的门槛非常高。我们为好奇的读者准备了"),t("a",{attrs:{href:"https://github.com/reactjs/rfcs/pull/68",target:"_blank",rel:"noopener noreferrer"}},[e._v("详细的征求意见文档"),t("OutboundLink")],1),e._v("，在文档中用更多细节深入讨论了我们推进这件事的动机，也在具体设计决策和相关先进技术上提供了额外的视角。")]),e._v(" "),t("p",[t("strong",[e._v("最重要的是，Hook 和现有代码可以同时工作，你可以渐进式地使用他们。")]),e._v(" 不用急着迁移到 Hook。我们建议避免任何“大规模重写”，尤其是对于现有的、复杂的 class 组件。开始“用 Hook 的方式思考”前，需要做一些思维上的转变。按照我们的经验，最好先在新的不复杂的组件中尝试使用 Hook，并确保团队中的每一位成员都能适应。在你尝试使用 Hook 后，欢迎给我们提供"),t("a",{attrs:{href:"https://github.com/facebook/react/issues/new",target:"_blank",rel:"noopener noreferrer"}},[e._v("反馈"),t("OutboundLink")],1),e._v("，无论好坏。")]),e._v(" "),t("p",[e._v("我们准备让 Hook 覆盖所有 class 组件的使用场景，但是**我们将继续为 class 组件提供支持。**在 Facebook，我们有成千上万的组件用 class 书写，我们完全没有重写它们的计划。相反，我们开始在新的代码中同时使用 Hook 和 class。")])])}),[],!1,null,null,null);t.default=a.exports}}]);